/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * 客户管理系统API文档
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://129.211.66.41/admin".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration?: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError";
    }
}

/**
 * 添加报价请求实体
 * @export
 * @interface AddQuotationReq
 */
export interface AddQuotationReq {
    /**
     * 报价内容
     * @type {string}
     * @memberof AddQuotationReq
     */
    content: string;
    /**
     * 对应项目
     * @type {number}
     * @memberof AddQuotationReq
     */
    project: number;
    /**
     * 报价金额
     * @type {number}
     * @memberof AddQuotationReq
     */
    quotation: number;
    /**
     * 备注
     * @type {string}
     * @memberof AddQuotationReq
     */
    remark?: string;
}

/**
 * 新增角色请求实体
 * @export
 * @interface AddRoleReq
 */
export interface AddRoleReq {
    /**
     * 权限Id列表
     * @type {Array<number>}
     * @memberof AddRoleReq
     */
    permissionIds?: Array<number>;
    /**
     * 角色描述
     * @type {string}
     * @memberof AddRoleReq
     */
    roleDesc?: string;
    /**
     * 角色名称
     * @type {string}
     * @memberof AddRoleReq
     */
    roleName: string;
}

/**
 * 
 * @export
 * @interface AddUserReq
 */
export interface AddUserReq {
    /**
     * 邮箱
     * @type {string}
     * @memberof AddUserReq
     */
    email: string;
    /**
     * 手机号
     * @type {string}
     * @memberof AddUserReq
     */
    mobile: string;
    /**
     * OA账号
     * @type {string}
     * @memberof AddUserReq
     */
    oaId?: string;
    /**
     * 组织id
     * @type {number}
     * @memberof AddUserReq
     */
    orgId?: number;
    /**
     * 密码
     * @type {string}
     * @memberof AddUserReq
     */
    password?: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof AddUserReq
     */
    realName: string;
    /**
     * 角色id
     * @type {Array<number>}
     * @memberof AddUserReq
     */
    roleId: Array<number>;
    /**
     * 用户名
     * @type {string}
     * @memberof AddUserReq
     */
    userName: string;
}

/**
 * 
 * @export
 * @interface GetContractListResp
 */
export interface GetContractListResp {
    /**
     * 
     * @type {number}
     * @memberof GetContractListResp
     */
    contractMoney?: number;
    /**
     * 
     * @type {string}
     * @memberof GetContractListResp
     */
    contractName?: string;
    /**
     * 
     * @type {string}
     * @memberof GetContractListResp
     */
    contractNo?: string;
    /**
     * 
     * @type {number}
     * @memberof GetContractListResp
     */
    customerId?: number;
    /**
     * 
     * @type {string}
     * @memberof GetContractListResp
     */
    customerName?: string;
    /**
     * 
     * @type {number}
     * @memberof GetContractListResp
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof GetContractListResp
     */
    signTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof GetContractListResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface GetCustomerFollowResp
 */
export interface GetCustomerFollowResp {
    /**
     * 
     * @type {Date}
     * @memberof GetCustomerFollowResp
     */
    createTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof GetCustomerFollowResp
     */
    creator?: number;
    /**
     * 
     * @type {number}
     * @memberof GetCustomerFollowResp
     */
    customerId?: number;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerFollowResp
     */
    followCase?: string;
    /**
     * 
     * @type {number}
     * @memberof GetCustomerFollowResp
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GetCustomerFollowResp
     */
    remark?: string;
}

/**
 * 
 * @export
 * @interface GetCustomerListResp
 */
export interface GetCustomerListResp {
    /**
     * 账户
     * @type {string}
     * @memberof GetCustomerListResp
     */
    account?: string;
    /**
     * 地址
     * @type {string}
     * @memberof GetCustomerListResp
     */
    address?: string;
    /**
     * 开户行
     * @type {string}
     * @memberof GetCustomerListResp
     */
    bank?: string;
    /**
     * 用户id
     * @type {string}
     * @memberof GetCustomerListResp
     */
    bankName?: string;
    /**
     * 联系人
     * @type {string}
     * @memberof GetCustomerListResp
     */
    contacts?: string;
    /**
     * 统一社会信用码
     * @type {string}
     * @memberof GetCustomerListResp
     */
    creditCode?: string;
    /**
     * 供应商名称
     * @type {string}
     * @memberof GetCustomerListResp
     */
    customerName?: string;
    /**
     * 主键id
     * @type {number}
     * @memberof GetCustomerListResp
     */
    id?: number;
    /**
     * 用户id
     * @type {string}
     * @memberof GetCustomerListResp
     */
    invoiceContent?: string;
    /**
     * 发票类型
     * @type {string}
     * @memberof GetCustomerListResp
     */
    invoiceType?: string;
    /**
     * 手机号码
     * @type {string}
     * @memberof GetCustomerListResp
     */
    phone?: string;
    /**
     * 注册地址
     * @type {string}
     * @memberof GetCustomerListResp
     */
    registerAddress?: string;
    /**
     * 电话
     * @type {string}
     * @memberof GetCustomerListResp
     */
    tel?: string;
}

/**
 * 
 * @export
 * @interface GetLoginUserInfoResp
 */
export interface GetLoginUserInfoResp {
    /**
     * 邮箱
     * @type {string}
     * @memberof GetLoginUserInfoResp
     */
    email?: string;
    /**
     * 手机号
     * @type {string}
     * @memberof GetLoginUserInfoResp
     */
    mobile?: string;
    /**
     * 真实姓名
     * @type {string}
     * @memberof GetLoginUserInfoResp
     */
    realName?: string;
    /**
     * 令牌
     * @type {string}
     * @memberof GetLoginUserInfoResp
     */
    token?: string;
    /**
     * 用户id
     * @type {number}
     * @memberof GetLoginUserInfoResp
     */
    userId?: number;
    /**
     * 用户名
     * @type {string}
     * @memberof GetLoginUserInfoResp
     */
    userName?: string;
}

/**
 * 
 * @export
 * @interface GetProjectListResp
 */
export interface GetProjectListResp {
    /**
     * 
     * @type {number}
     * @memberof GetProjectListResp
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GetProjectListResp
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface GetRoleInfoResp
 */
export interface GetRoleInfoResp {
    /**
     * 权限id列表
     * @type {Array<number>}
     * @memberof GetRoleInfoResp
     */
    permissionIdList?: Array<number>;
    /**
     * 角色描述
     * @type {string}
     * @memberof GetRoleInfoResp
     */
    roleDesc?: string;
    /**
     * 角色名称
     * @type {string}
     * @memberof GetRoleInfoResp
     */
    roleName?: string;
}

/**
 * 
 * @export
 * @interface GetRoleListResp
 */
export interface GetRoleListResp {
    /**
     * 是否可以删除
     * @type {boolean}
     * @memberof GetRoleListResp
     */
    canDelete?: boolean;
    /**
     * 是否可以编辑
     * @type {boolean}
     * @memberof GetRoleListResp
     */
    canEdit?: boolean;
    /**
     * 创建时间
     * @type {Date}
     * @memberof GetRoleListResp
     */
    createTime?: Date;
    /**
     * 角色id
     * @type {number}
     * @memberof GetRoleListResp
     */
    id?: number;
    /**
     * 角色描述
     * @type {string}
     * @memberof GetRoleListResp
     */
    roleDesc?: string;
    /**
     * 角色名称
     * @type {string}
     * @memberof GetRoleListResp
     */
    roleName?: string;
}

/**
 * 
 * @export
 * @interface GetUserListResp
 */
export interface GetUserListResp {
    /**
     * 
     * @type {boolean}
     * @memberof GetUserListResp
     */
    canDelete?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserListResp
     */
    canEdit?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof GetUserListResp
     */
    createTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof GetUserListResp
     */
    email?: string;
    /**
     * 
     * @type {number}
     * @memberof GetUserListResp
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUserListResp
     */
    mobile?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserListResp
     */
    oaId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserListResp
     */
    orgId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserListResp
     */
    parentId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserListResp
     */
    realName?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserListResp
     */
    roleId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserListResp
     */
    roleName?: string;
    /**
     * 
     * @type {Date}
     * @memberof GetUserListResp
     */
    updateTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof GetUserListResp
     */
    userName?: string;
}

/**
 * 
 * @export
 * @interface ListPermissionResp
 */
export interface ListPermissionResp {
    /**
     * 权限id
     * @type {number}
     * @memberof ListPermissionResp
     */
    id?: number;
    /**
     * 权限名称
     * @type {string}
     * @memberof ListPermissionResp
     */
    name?: string;
    /**
     * 上级权限id
     * @type {number}
     * @memberof ListPermissionResp
     */
    parentId?: number;
    /**
     * 上级权限名称
     * @type {string}
     * @memberof ListPermissionResp
     */
    parentName?: string;
    /**
     * 权限标识
     * @type {string}
     * @memberof ListPermissionResp
     */
    perms?: string;
    /**
     * 图表对应的图片名称
     * @type {string}
     * @memberof ListPermissionResp
     */
    picName?: string;
    /**
     * 类型
     * @type {number}
     * @memberof ListPermissionResp
     */
    type?: number;
}

/**
 * 登录请求实体
 * @export
 * @interface LoginReq
 */
export interface LoginReq {
    /**
     * 验证码
     * @type {string}
     * @memberof LoginReq
     */
    captcha: string;
    /**
     * 密码
     * @type {string}
     * @memberof LoginReq
     */
    password: string;
    /**
     * 用户名
     * @type {string}
     * @memberof LoginReq
     */
    userName: string;
}

/**
 * 
 * @export
 * @interface PageInfoGetContractListResp
 */
export interface PageInfoGetContractListResp {
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    firstPage?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetContractListResp
     */
    hasNextPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetContractListResp
     */
    hasPreviousPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetContractListResp
     */
    isFirstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetContractListResp
     */
    isLastPage?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    lastPage?: number;
    /**
     * 
     * @type {Array<GetContractListResp>}
     * @memberof PageInfoGetContractListResp
     */
    list?: Array<GetContractListResp>;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    navigateFirstPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    navigateLastPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    navigatePages?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageInfoGetContractListResp
     */
    navigatepageNums?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    nextPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    pages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    prePage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetContractListResp
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface PageInfoGetCustomerListResp
 */
export interface PageInfoGetCustomerListResp {
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    firstPage?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetCustomerListResp
     */
    hasNextPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetCustomerListResp
     */
    hasPreviousPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetCustomerListResp
     */
    isFirstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetCustomerListResp
     */
    isLastPage?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    lastPage?: number;
    /**
     * 
     * @type {Array<GetCustomerListResp>}
     * @memberof PageInfoGetCustomerListResp
     */
    list?: Array<GetCustomerListResp>;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    navigateFirstPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    navigateLastPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    navigatePages?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageInfoGetCustomerListResp
     */
    navigatepageNums?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    nextPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    pages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    prePage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetCustomerListResp
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface PageInfoGetRoleListResp
 */
export interface PageInfoGetRoleListResp {
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    firstPage?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetRoleListResp
     */
    hasNextPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetRoleListResp
     */
    hasPreviousPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetRoleListResp
     */
    isFirstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetRoleListResp
     */
    isLastPage?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    lastPage?: number;
    /**
     * 
     * @type {Array<GetRoleListResp>}
     * @memberof PageInfoGetRoleListResp
     */
    list?: Array<GetRoleListResp>;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    navigateFirstPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    navigateLastPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    navigatePages?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageInfoGetRoleListResp
     */
    navigatepageNums?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    nextPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    pages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    prePage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetRoleListResp
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface PageInfoGetUserListResp
 */
export interface PageInfoGetUserListResp {
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    endRow?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    firstPage?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetUserListResp
     */
    hasNextPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetUserListResp
     */
    hasPreviousPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetUserListResp
     */
    isFirstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfoGetUserListResp
     */
    isLastPage?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    lastPage?: number;
    /**
     * 
     * @type {Array<GetUserListResp>}
     * @memberof PageInfoGetUserListResp
     */
    list?: Array<GetUserListResp>;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    navigateFirstPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    navigateLastPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    navigatePages?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PageInfoGetUserListResp
     */
    navigatepageNums?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    nextPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    pageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    pages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    prePage?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    startRow?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoGetUserListResp
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface Result
 */
export interface Result {
    /**
     * 
     * @type {any}
     * @memberof Result
     */
    data?: any;
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof Result
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface ResultGetLoginUserInfoResp
 */
export interface ResultGetLoginUserInfoResp {
    /**
     * 
     * @type {GetLoginUserInfoResp}
     * @memberof ResultGetLoginUserInfoResp
     */
    data?: GetLoginUserInfoResp;
    /**
     * 
     * @type {string}
     * @memberof ResultGetLoginUserInfoResp
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultGetLoginUserInfoResp
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultGetLoginUserInfoResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface ResultGetProjectListResp
 */
export interface ResultGetProjectListResp {
    /**
     * 
     * @type {GetProjectListResp}
     * @memberof ResultGetProjectListResp
     */
    data?: GetProjectListResp;
    /**
     * 
     * @type {string}
     * @memberof ResultGetProjectListResp
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultGetProjectListResp
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultGetProjectListResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface ResultGetRoleInfoResp
 */
export interface ResultGetRoleInfoResp {
    /**
     * 
     * @type {GetRoleInfoResp}
     * @memberof ResultGetRoleInfoResp
     */
    data?: GetRoleInfoResp;
    /**
     * 
     * @type {string}
     * @memberof ResultGetRoleInfoResp
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultGetRoleInfoResp
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultGetRoleInfoResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface ResultGetUserListResp
 */
export interface ResultGetUserListResp {
    /**
     * 
     * @type {GetUserListResp}
     * @memberof ResultGetUserListResp
     */
    data?: GetUserListResp;
    /**
     * 
     * @type {string}
     * @memberof ResultGetUserListResp
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultGetUserListResp
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultGetUserListResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface ResultListGetCustomerFollowResp
 */
export interface ResultListGetCustomerFollowResp {
    /**
     * 
     * @type {Array<GetCustomerFollowResp>}
     * @memberof ResultListGetCustomerFollowResp
     */
    data?: Array<GetCustomerFollowResp>;
    /**
     * 
     * @type {string}
     * @memberof ResultListGetCustomerFollowResp
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultListGetCustomerFollowResp
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultListGetCustomerFollowResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface ResultListListPermissionResp
 */
export interface ResultListListPermissionResp {
    /**
     * 
     * @type {Array<ListPermissionResp>}
     * @memberof ResultListListPermissionResp
     */
    data?: Array<ListPermissionResp>;
    /**
     * 
     * @type {string}
     * @memberof ResultListListPermissionResp
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultListListPermissionResp
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultListListPermissionResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface ResultListZtreeResp
 */
export interface ResultListZtreeResp {
    /**
     * 
     * @type {Array<ZtreeResp>}
     * @memberof ResultListZtreeResp
     */
    data?: Array<ZtreeResp>;
    /**
     * 
     * @type {string}
     * @memberof ResultListZtreeResp
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultListZtreeResp
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultListZtreeResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface ResultPageInfoGetContractListResp
 */
export interface ResultPageInfoGetContractListResp {
    /**
     * 
     * @type {PageInfoGetContractListResp}
     * @memberof ResultPageInfoGetContractListResp
     */
    data?: PageInfoGetContractListResp;
    /**
     * 
     * @type {string}
     * @memberof ResultPageInfoGetContractListResp
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultPageInfoGetContractListResp
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultPageInfoGetContractListResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface ResultPageInfoGetCustomerListResp
 */
export interface ResultPageInfoGetCustomerListResp {
    /**
     * 
     * @type {PageInfoGetCustomerListResp}
     * @memberof ResultPageInfoGetCustomerListResp
     */
    data?: PageInfoGetCustomerListResp;
    /**
     * 
     * @type {string}
     * @memberof ResultPageInfoGetCustomerListResp
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultPageInfoGetCustomerListResp
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultPageInfoGetCustomerListResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface ResultPageInfoGetRoleListResp
 */
export interface ResultPageInfoGetRoleListResp {
    /**
     * 
     * @type {PageInfoGetRoleListResp}
     * @memberof ResultPageInfoGetRoleListResp
     */
    data?: PageInfoGetRoleListResp;
    /**
     * 
     * @type {string}
     * @memberof ResultPageInfoGetRoleListResp
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultPageInfoGetRoleListResp
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultPageInfoGetRoleListResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface ResultPageInfoGetUserListResp
 */
export interface ResultPageInfoGetUserListResp {
    /**
     * 
     * @type {PageInfoGetUserListResp}
     * @memberof ResultPageInfoGetUserListResp
     */
    data?: PageInfoGetUserListResp;
    /**
     * 
     * @type {string}
     * @memberof ResultPageInfoGetUserListResp
     */
    msg?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultPageInfoGetUserListResp
     */
    respTime?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultPageInfoGetUserListResp
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface UpdatePwdReq
 */
export interface UpdatePwdReq {
    /**
     * 新密码
     * @type {string}
     * @memberof UpdatePwdReq
     */
    newPassword: string;
    /**
     * 旧密码
     * @type {string}
     * @memberof UpdatePwdReq
     */
    oldPassword: string;
    /**
     * 用户id
     * @type {number}
     * @memberof UpdatePwdReq
     */
    userId: number;
}

/**
 * 修改角色请求实体
 * @export
 * @interface UpdateRoleReq
 */
export interface UpdateRoleReq {
    /**
     * 权限Id列表
     * @type {Array<number>}
     * @memberof UpdateRoleReq
     */
    permissionIds?: Array<number>;
    /**
     * 角色描述
     * @type {string}
     * @memberof UpdateRoleReq
     */
    roleDesc?: string;
    /**
     * 角色id
     * @type {number}
     * @memberof UpdateRoleReq
     */
    roleId: number;
    /**
     * 角色名称
     * @type {string}
     * @memberof UpdateRoleReq
     */
    roleName: string;
}

/**
 * 
 * @export
 * @interface UpdateUserReq
 */
export interface UpdateUserReq {
    /**
     * 邮箱
     * @type {string}
     * @memberof UpdateUserReq
     */
    email: string;
    /**
     * 手机号
     * @type {string}
     * @memberof UpdateUserReq
     */
    mobile: string;
    /**
     * OA账号
     * @type {string}
     * @memberof UpdateUserReq
     */
    oaId?: string;
    /**
     * 组织id
     * @type {number}
     * @memberof UpdateUserReq
     */
    orgId?: number;
    /**
     * 真实姓名
     * @type {string}
     * @memberof UpdateUserReq
     */
    realName: string;
    /**
     * 角色id
     * @type {Array<number>}
     * @memberof UpdateUserReq
     */
    roleId: Array<number>;
    /**
     * 用户id
     * @type {number}
     * @memberof UpdateUserReq
     */
    userId: number;
}

/**
 * 
 * @export
 * @interface ZtreeResp
 */
export interface ZtreeResp {
    /**
     * 是否选中
     * @type {boolean}
     * @memberof ZtreeResp
     */
    chkDisabled?: boolean;
    /**
     * 权限id
     * @type {number}
     * @memberof ZtreeResp
     */
    id?: number;
    /**
     * 权限名称
     * @type {string}
     * @memberof ZtreeResp
     */
    name?: string;
    /**
     * 是否展开
     * @type {boolean}
     * @memberof ZtreeResp
     */
    open?: boolean;
    /**
     * 上级权限id
     * @type {number}
     * @memberof ZtreeResp
     */
    pId?: number;
}


/**
 * ContractControllerApi - fetch parameter creator
 * @export
 */
export const ContractControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取合同列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [contractNo] 合同编号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContractUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, contractNo?: string, options: any = {}): FetchArgs {
            const localVarPath = `/contract/listContract`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageCurrent !== undefined) {
                localVarQueryParameter['pageCurrent'] = pageCurrent;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (descOrAsc !== undefined) {
                localVarQueryParameter['descOrAsc'] = descOrAsc;
            }

            if (pageBegin !== undefined) {
                localVarQueryParameter['pageBegin'] = pageBegin;
            }

            if (contractNo !== undefined) {
                localVarQueryParameter['contractNo'] = contractNo;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractControllerApi - functional programming interface
 * @export
 */
export const ContractControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取合同列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [contractNo] 合同编号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContractUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, contractNo?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetContractListResp> {
            const localVarFetchArgs = ContractControllerApiFetchParamCreator(configuration).listContractUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, contractNo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ContractControllerApi - factory interface
 * @export
 */
export const ContractControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 获取合同列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [contractNo] 合同编号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContractUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, contractNo?: string, options?: any) {
            return ContractControllerApiFp(configuration).listContractUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, contractNo, options)(fetch, basePath);
        },
    };
};

/**
 * ContractControllerApi - object-oriented interface
 * @export
 * @class ContractControllerApi
 * @extends {BaseAPI}
 */
export class ContractControllerApi extends BaseAPI {
    /**
     * 
     * @summary 获取合同列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin] 
     * @param {string} [contractNo] 合同编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractControllerApi
     */
    public listContractUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, contractNo?: string, options?: any) {
        return ContractControllerApiFp(this.configuration).listContractUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, contractNo, options)(this.fetch, this.basePath);
    }

}

/**
 * CustomerControllerApi - fetch parameter creator
 * @export
 */
export const CustomerControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取客户的跟进信息
         * @param {number} customerId 客户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerFollowUsingGET(customerId: number, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling getCustomerFollowUsingGET.');
            }
            const localVarPath = `/customer/getCustomerFollow`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customerId !== undefined) {
                localVarQueryParameter['customerId'] = customerId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取客户列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [customerName] 供应商名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, customerName?: string, options: any = {}): FetchArgs {
            const localVarPath = `/customer/listCustomer`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageCurrent !== undefined) {
                localVarQueryParameter['pageCurrent'] = pageCurrent;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (descOrAsc !== undefined) {
                localVarQueryParameter['descOrAsc'] = descOrAsc;
            }

            if (pageBegin !== undefined) {
                localVarQueryParameter['pageBegin'] = pageBegin;
            }

            if (customerName !== undefined) {
                localVarQueryParameter['customerName'] = customerName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerControllerApi - functional programming interface
 * @export
 */
export const CustomerControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取客户的跟进信息
         * @param {number} customerId 客户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerFollowUsingGET(customerId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultListGetCustomerFollowResp> {
            const localVarFetchArgs = CustomerControllerApiFetchParamCreator(configuration).getCustomerFollowUsingGET(customerId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取客户列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [customerName] 供应商名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, customerName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetCustomerListResp> {
            const localVarFetchArgs = CustomerControllerApiFetchParamCreator(configuration).listCustomerUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, customerName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CustomerControllerApi - factory interface
 * @export
 */
export const CustomerControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 获取客户的跟进信息
         * @param {number} customerId 客户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerFollowUsingGET(customerId: number, options?: any) {
            return CustomerControllerApiFp(configuration).getCustomerFollowUsingGET(customerId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取客户列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [customerName] 供应商名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, customerName?: string, options?: any) {
            return CustomerControllerApiFp(configuration).listCustomerUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, customerName, options)(fetch, basePath);
        },
    };
};

/**
 * CustomerControllerApi - object-oriented interface
 * @export
 * @class CustomerControllerApi
 * @extends {BaseAPI}
 */
export class CustomerControllerApi extends BaseAPI {
    /**
     * 
     * @summary 获取客户的跟进信息
     * @param {number} customerId 客户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    public getCustomerFollowUsingGET(customerId: number, options?: any) {
        return CustomerControllerApiFp(this.configuration).getCustomerFollowUsingGET(customerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取客户列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin] 
     * @param {string} [customerName] 供应商名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    public listCustomerUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, customerName?: string, options?: any) {
        return CustomerControllerApiFp(this.configuration).listCustomerUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, customerName, options)(this.fetch, this.basePath);
    }

}

/**
 * LoginControllerApi - fetch parameter creator
 * @export
 */
export const LoginControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 生成验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captchaUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/login/captcha`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 登录
         * @param {LoginReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST(request: LoginReq, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling loginUsingPOST.');
            }
            const localVarPath = `/login/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 注销
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/login/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginControllerApi - functional programming interface
 * @export
 */
export const LoginControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 生成验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captchaUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LoginControllerApiFetchParamCreator(configuration).captchaUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 登录
         * @param {LoginReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST(request: LoginReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = LoginControllerApiFetchParamCreator(configuration).loginUsingPOST(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 注销
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = LoginControllerApiFetchParamCreator(configuration).logoutUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * LoginControllerApi - factory interface
 * @export
 */
export const LoginControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 生成验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captchaUsingGET(options?: any) {
            return LoginControllerApiFp(configuration).captchaUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 登录
         * @param {LoginReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST(request: LoginReq, options?: any) {
            return LoginControllerApiFp(configuration).loginUsingPOST(request, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 注销
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUsingGET(options?: any) {
            return LoginControllerApiFp(configuration).logoutUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * LoginControllerApi - object-oriented interface
 * @export
 * @class LoginControllerApi
 * @extends {BaseAPI}
 */
export class LoginControllerApi extends BaseAPI {
    /**
     * 
     * @summary 生成验证码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public captchaUsingGET(options?: any) {
        return LoginControllerApiFp(this.configuration).captchaUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 登录
     * @param {LoginReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public loginUsingPOST(request: LoginReq, options?: any) {
        return LoginControllerApiFp(this.configuration).loginUsingPOST(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 注销
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginControllerApi
     */
    public logoutUsingGET(options?: any) {
        return LoginControllerApiFp(this.configuration).logoutUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * PermissionControllerApi - fetch parameter creator
 * @export
 */
export const PermissionControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取当前用户权限列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionListUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/permission/getUserPermissionList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取权限树
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        treePermsUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/permission/treePerms`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionControllerApi - functional programming interface
 * @export
 */
export const PermissionControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取当前用户权限列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionListUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultListListPermissionResp> {
            const localVarFetchArgs = PermissionControllerApiFetchParamCreator(configuration).getUserPermissionListUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取权限树
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        treePermsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultListZtreeResp> {
            const localVarFetchArgs = PermissionControllerApiFetchParamCreator(configuration).treePermsUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PermissionControllerApi - factory interface
 * @export
 */
export const PermissionControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 获取当前用户权限列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionListUsingGET(options?: any) {
            return PermissionControllerApiFp(configuration).getUserPermissionListUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取权限树
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        treePermsUsingGET(options?: any) {
            return PermissionControllerApiFp(configuration).treePermsUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * PermissionControllerApi - object-oriented interface
 * @export
 * @class PermissionControllerApi
 * @extends {BaseAPI}
 */
export class PermissionControllerApi extends BaseAPI {
    /**
     * 
     * @summary 获取当前用户权限列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionControllerApi
     */
    public getUserPermissionListUsingGET(options?: any) {
        return PermissionControllerApiFp(this.configuration).getUserPermissionListUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取权限树
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionControllerApi
     */
    public treePermsUsingGET(options?: any) {
        return PermissionControllerApiFp(this.configuration).treePermsUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * ProjectControllerApi - fetch parameter creator
 * @export
 */
export const ProjectControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 根据项目名称获取项目信息
         * @param {string} name 项目名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectByNameUsingGET(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getProjectByNameUsingGET.');
            }
            const localVarPath = `/project/getProjectByName`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectControllerApi - functional programming interface
 * @export
 */
export const ProjectControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 根据项目名称获取项目信息
         * @param {string} name 项目名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectByNameUsingGET(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetProjectListResp> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).getProjectByNameUsingGET(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProjectControllerApi - factory interface
 * @export
 */
export const ProjectControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 根据项目名称获取项目信息
         * @param {string} name 项目名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectByNameUsingGET(name: string, options?: any) {
            return ProjectControllerApiFp(configuration).getProjectByNameUsingGET(name, options)(fetch, basePath);
        },
    };
};

/**
 * ProjectControllerApi - object-oriented interface
 * @export
 * @class ProjectControllerApi
 * @extends {BaseAPI}
 */
export class ProjectControllerApi extends BaseAPI {
    /**
     * 
     * @summary 根据项目名称获取项目信息
     * @param {string} name 项目名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getProjectByNameUsingGET(name: string, options?: any) {
        return ProjectControllerApiFp(this.configuration).getProjectByNameUsingGET(name, options)(this.fetch, this.basePath);
    }

}

/**
 * ProjectQuotationControllerApi - fetch parameter creator
 * @export
 */
export const ProjectQuotationControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增报价
         * @param {AddQuotationReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuotationUsingPOST(request: AddQuotationReq, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addQuotationUsingPOST.');
            }
            const localVarPath = `/quotation/addQuotation`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddQuotationReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目报价列表
         * @param {string} projectName 项目名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectQuotationInfoUsingGET(projectName: string, options: any = {}): FetchArgs {
            // verify required parameter 'projectName' is not null or undefined
            if (projectName === null || projectName === undefined) {
                throw new RequiredError('projectName','Required parameter projectName was null or undefined when calling getProjectQuotationInfoUsingGET.');
            }
            const localVarPath = `/quotation/getProjectQuotationInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectName !== undefined) {
                localVarQueryParameter['projectName'] = projectName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectQuotationControllerApi - functional programming interface
 * @export
 */
export const ProjectQuotationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增报价
         * @param {AddQuotationReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuotationUsingPOST(request: AddQuotationReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = ProjectQuotationControllerApiFetchParamCreator(configuration).addQuotationUsingPOST(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取项目报价列表
         * @param {string} projectName 项目名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectQuotationInfoUsingGET(projectName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = ProjectQuotationControllerApiFetchParamCreator(configuration).getProjectQuotationInfoUsingGET(projectName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProjectQuotationControllerApi - factory interface
 * @export
 */
export const ProjectQuotationControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 新增报价
         * @param {AddQuotationReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuotationUsingPOST(request: AddQuotationReq, options?: any) {
            return ProjectQuotationControllerApiFp(configuration).addQuotationUsingPOST(request, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取项目报价列表
         * @param {string} projectName 项目名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectQuotationInfoUsingGET(projectName: string, options?: any) {
            return ProjectQuotationControllerApiFp(configuration).getProjectQuotationInfoUsingGET(projectName, options)(fetch, basePath);
        },
    };
};

/**
 * ProjectQuotationControllerApi - object-oriented interface
 * @export
 * @class ProjectQuotationControllerApi
 * @extends {BaseAPI}
 */
export class ProjectQuotationControllerApi extends BaseAPI {
    /**
     * 
     * @summary 新增报价
     * @param {AddQuotationReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectQuotationControllerApi
     */
    public addQuotationUsingPOST(request: AddQuotationReq, options?: any) {
        return ProjectQuotationControllerApiFp(this.configuration).addQuotationUsingPOST(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取项目报价列表
     * @param {string} projectName 项目名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectQuotationControllerApi
     */
    public getProjectQuotationInfoUsingGET(projectName: string, options?: any) {
        return ProjectQuotationControllerApiFp(this.configuration).getProjectQuotationInfoUsingGET(projectName, options)(this.fetch, this.basePath);
    }

}

/**
 * RoleControllerApi - fetch parameter creator
 * @export
 */
export const RoleControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增角色
         * @param {AddRoleReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserUsingPOST(request: AddRoleReq, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addUserUsingPOST.');
            }
            const localVarPath = `/role/addRole`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddRoleReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除角色
         * @param {number} roleId 角色id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleUsingPOST(roleId: number, options: any = {}): FetchArgs {
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling deleteRoleUsingPOST.');
            }
            const localVarPath = `/role/deleteRole`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据角色id获取角色信息
         * @param {number} roleId 角色id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInfoByRoleIdUsingGET(roleId: number, options: any = {}): FetchArgs {
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling getRoleInfoByRoleIdUsingGET.');
            }
            const localVarPath = `/role/getRoleInfoByRoleId`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取角色列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [roleName] 角色名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleInfoUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, roleName?: string, options: any = {}): FetchArgs {
            const localVarPath = `/role/listRoleInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageCurrent !== undefined) {
                localVarQueryParameter['pageCurrent'] = pageCurrent;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (descOrAsc !== undefined) {
                localVarQueryParameter['descOrAsc'] = descOrAsc;
            }

            if (pageBegin !== undefined) {
                localVarQueryParameter['pageBegin'] = pageBegin;
            }

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过名称查询角色
         * @param {string} roleName 角色名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectUserNameByRoleUsingGET(roleName: string, options: any = {}): FetchArgs {
            // verify required parameter 'roleName' is not null or undefined
            if (roleName === null || roleName === undefined) {
                throw new RequiredError('roleName','Required parameter roleName was null or undefined when calling selectUserNameByRoleUsingGET.');
            }
            const localVarPath = `/role/getUserNameByRole`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改角色
         * @param {UpdateRoleReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleUsingPOST(request: UpdateRoleReq, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateRoleUsingPOST.');
            }
            const localVarPath = `/role/updateRole`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateRoleReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleControllerApi - functional programming interface
 * @export
 */
export const RoleControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增角色
         * @param {AddRoleReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserUsingPOST(request: AddRoleReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).addUserUsingPOST(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除角色
         * @param {number} roleId 角色id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleUsingPOST(roleId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).deleteRoleUsingPOST(roleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 根据角色id获取角色信息
         * @param {number} roleId 角色id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInfoByRoleIdUsingGET(roleId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetRoleInfoResp> {
            const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).getRoleInfoByRoleIdUsingGET(roleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取角色列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [roleName] 角色名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleInfoUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, roleName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetRoleListResp> {
            const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).listRoleInfoUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, roleName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 通过名称查询角色
         * @param {string} roleName 角色名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectUserNameByRoleUsingGET(roleName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).selectUserNameByRoleUsingGET(roleName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 修改角色
         * @param {UpdateRoleReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleUsingPOST(request: UpdateRoleReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).updateRoleUsingPOST(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RoleControllerApi - factory interface
 * @export
 */
export const RoleControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 新增角色
         * @param {AddRoleReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserUsingPOST(request: AddRoleReq, options?: any) {
            return RoleControllerApiFp(configuration).addUserUsingPOST(request, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除角色
         * @param {number} roleId 角色id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleUsingPOST(roleId: number, options?: any) {
            return RoleControllerApiFp(configuration).deleteRoleUsingPOST(roleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 根据角色id获取角色信息
         * @param {number} roleId 角色id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInfoByRoleIdUsingGET(roleId: number, options?: any) {
            return RoleControllerApiFp(configuration).getRoleInfoByRoleIdUsingGET(roleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取角色列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [roleName] 角色名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleInfoUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, roleName?: string, options?: any) {
            return RoleControllerApiFp(configuration).listRoleInfoUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, roleName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 通过名称查询角色
         * @param {string} roleName 角色名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectUserNameByRoleUsingGET(roleName: string, options?: any) {
            return RoleControllerApiFp(configuration).selectUserNameByRoleUsingGET(roleName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 修改角色
         * @param {UpdateRoleReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleUsingPOST(request: UpdateRoleReq, options?: any) {
            return RoleControllerApiFp(configuration).updateRoleUsingPOST(request, options)(fetch, basePath);
        },
    };
};

/**
 * RoleControllerApi - object-oriented interface
 * @export
 * @class RoleControllerApi
 * @extends {BaseAPI}
 */
export class RoleControllerApi extends BaseAPI {
    /**
     * 
     * @summary 新增角色
     * @param {AddRoleReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public addUserUsingPOST(request: AddRoleReq, options?: any) {
        return RoleControllerApiFp(this.configuration).addUserUsingPOST(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除角色
     * @param {number} roleId 角色id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public deleteRoleUsingPOST(roleId: number, options?: any) {
        return RoleControllerApiFp(this.configuration).deleteRoleUsingPOST(roleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 根据角色id获取角色信息
     * @param {number} roleId 角色id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getRoleInfoByRoleIdUsingGET(roleId: number, options?: any) {
        return RoleControllerApiFp(this.configuration).getRoleInfoByRoleIdUsingGET(roleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取角色列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin] 
     * @param {string} [roleName] 角色名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public listRoleInfoUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, roleName?: string, options?: any) {
        return RoleControllerApiFp(this.configuration).listRoleInfoUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, roleName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 通过名称查询角色
     * @param {string} roleName 角色名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public selectUserNameByRoleUsingGET(roleName: string, options?: any) {
        return RoleControllerApiFp(this.configuration).selectUserNameByRoleUsingGET(roleName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 修改角色
     * @param {UpdateRoleReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public updateRoleUsingPOST(request: UpdateRoleReq, options?: any) {
        return RoleControllerApiFp(this.configuration).updateRoleUsingPOST(request, options)(this.fetch, this.basePath);
    }

}

/**
 * UserControllerApi - fetch parameter creator
 * @export
 */
export const UserControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增用户
         * @param {AddUserReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserUsingPOST1(request: AddUserReq, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addUserUsingPOST1.');
            }
            const localVarPath = `/user/addUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddUserReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除用户
         * @param {number} userId 用户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingPOST(userId: number, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUserUsingPOST.');
            }
            const localVarPath = `/user/deleteUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取登录的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginUserInfoUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/user/getLoginUserInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据用户id获取用户
         * @param {number} userId 用户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserIdUsingGET(userId: number, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserByUserIdUsingGET.');
            }
            const localVarPath = `/user/getUserByUserId`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [realName] 
         * @param {string} [mobile] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserInfoUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, realName?: string, mobile?: string, userName?: string, options: any = {}): FetchArgs {
            const localVarPath = `/user/listUserInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageCurrent !== undefined) {
                localVarQueryParameter['pageCurrent'] = pageCurrent;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (descOrAsc !== undefined) {
                localVarQueryParameter['descOrAsc'] = descOrAsc;
            }

            if (pageBegin !== undefined) {
                localVarQueryParameter['pageBegin'] = pageBegin;
            }

            if (realName !== undefined) {
                localVarQueryParameter['realName'] = realName;
            }

            if (mobile !== undefined) {
                localVarQueryParameter['mobile'] = mobile;
            }

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改密码
         * @param {UpdatePwdReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePasswordUsingPOST(request: UpdatePwdReq, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updatePasswordUsingPOST.');
            }
            const localVarPath = `/user/updatePassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdatePwdReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新用户
         * @param {UpdateUserReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPOST(request: UpdateUserReq, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateUserUsingPOST.');
            }
            const localVarPath = `/user/updateUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateUserReq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增用户
         * @param {AddUserReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserUsingPOST1(request: AddUserReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).addUserUsingPOST1(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除用户
         * @param {number} userId 用户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingPOST(userId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).deleteUserUsingPOST(userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取登录的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginUserInfoUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetLoginUserInfoResp> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).getLoginUserInfoUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 根据用户id获取用户
         * @param {number} userId 用户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserIdUsingGET(userId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetUserListResp> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).getUserByUserIdUsingGET(userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [realName] 
         * @param {string} [mobile] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserInfoUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, realName?: string, mobile?: string, userName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetUserListResp> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).listUserInfoUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, realName, mobile, userName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 修改密码
         * @param {UpdatePwdReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePasswordUsingPOST(request: UpdatePwdReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).updatePasswordUsingPOST(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 更新用户
         * @param {UpdateUserReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPOST(request: UpdateUserReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).updateUserUsingPOST(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 新增用户
         * @param {AddUserReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserUsingPOST1(request: AddUserReq, options?: any) {
            return UserControllerApiFp(configuration).addUserUsingPOST1(request, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除用户
         * @param {number} userId 用户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingPOST(userId: number, options?: any) {
            return UserControllerApiFp(configuration).deleteUserUsingPOST(userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取登录的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginUserInfoUsingGET(options?: any) {
            return UserControllerApiFp(configuration).getLoginUserInfoUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 根据用户id获取用户
         * @param {number} userId 用户id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserIdUsingGET(userId: number, options?: any) {
            return UserControllerApiFp(configuration).getUserByUserIdUsingGET(userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户列表
         * @param {number} [pageCurrent] 当前页
         * @param {number} [pageSize] 每页数量
         * @param {string} [orderBy] 排序字段
         * @param {string} [descOrAsc] 升序或降序
         * @param {number} [pageBegin] 
         * @param {string} [realName] 
         * @param {string} [mobile] 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserInfoUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, realName?: string, mobile?: string, userName?: string, options?: any) {
            return UserControllerApiFp(configuration).listUserInfoUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, realName, mobile, userName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 修改密码
         * @param {UpdatePwdReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePasswordUsingPOST(request: UpdatePwdReq, options?: any) {
            return UserControllerApiFp(configuration).updatePasswordUsingPOST(request, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 更新用户
         * @param {UpdateUserReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPOST(request: UpdateUserReq, options?: any) {
            return UserControllerApiFp(configuration).updateUserUsingPOST(request, options)(fetch, basePath);
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary 新增用户
     * @param {AddUserReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public addUserUsingPOST1(request: AddUserReq, options?: any) {
        return UserControllerApiFp(this.configuration).addUserUsingPOST1(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除用户
     * @param {number} userId 用户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public deleteUserUsingPOST(userId: number, options?: any) {
        return UserControllerApiFp(this.configuration).deleteUserUsingPOST(userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取登录的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getLoginUserInfoUsingGET(options?: any) {
        return UserControllerApiFp(this.configuration).getLoginUserInfoUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 根据用户id获取用户
     * @param {number} userId 用户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserByUserIdUsingGET(userId: number, options?: any) {
        return UserControllerApiFp(this.configuration).getUserByUserIdUsingGET(userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin] 
     * @param {string} [realName] 
     * @param {string} [mobile] 
     * @param {string} [userName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public listUserInfoUsingGET(pageCurrent?: number, pageSize?: number, orderBy?: string, descOrAsc?: string, pageBegin?: number, realName?: string, mobile?: string, userName?: string, options?: any) {
        return UserControllerApiFp(this.configuration).listUserInfoUsingGET(pageCurrent, pageSize, orderBy, descOrAsc, pageBegin, realName, mobile, userName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 修改密码
     * @param {UpdatePwdReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updatePasswordUsingPOST(request: UpdatePwdReq, options?: any) {
        return UserControllerApiFp(this.configuration).updatePasswordUsingPOST(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 更新用户
     * @param {UpdateUserReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateUserUsingPOST(request: UpdateUserReq, options?: any) {
        return UserControllerApiFp(this.configuration).updateUserUsingPOST(request, options)(this.fetch, this.basePath);
    }

}

