/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * 客户管理系统API文档
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://129.211.66.41:8080/admin".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|"
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration?: Configuration;

  constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface AddContractInvoiceReq
 */
export interface AddContractInvoiceReq {
  /**
   * 合同id
   * @type {number}
   * @memberof AddContractInvoiceReq
   */
  contractId?: number;
  /**
   * 发票金额
   * @type {number}
   * @memberof AddContractInvoiceReq
   */
  invoiceMoney?: number;
  /**
   * 发票编号
   * @type {string}
   * @memberof AddContractInvoiceReq
   */
  invoiceNo?: string;
  /**
   * 开票人
   * @type {string}
   * @memberof AddContractInvoiceReq
   */
  invoicePerson?: string;
  /**
   * 开票时间
   * @type {Date}
   * @memberof AddContractInvoiceReq
   */
  invoiceTime?: Date;
  /**
   * 期间id
   * @type {number}
   * @memberof AddContractInvoiceReq
   */
  periodId?: number;
  /**
   * 备注
   * @type {string}
   * @memberof AddContractInvoiceReq
   */
  remark?: string;
}

/**
 *
 * @export
 * @interface AddContractPeriodReq
 */
export interface AddContractPeriodReq {
  /**
   * 合同id
   * @type {number}
   * @memberof AddContractPeriodReq
   */
  contractId?: number;
  /**
   * 结束时间
   * @type {Date}
   * @memberof AddContractPeriodReq
   */
  endTime?: Date;
  /**
   * 期间内容
   * @type {string}
   * @memberof AddContractPeriodReq
   */
  periodContent?: string;
  /**
   * 期间金额
   * @type {number}
   * @memberof AddContractPeriodReq
   */
  periodMoney?: number;
  /**
   * 期间名称
   * @type {string}
   * @memberof AddContractPeriodReq
   */
  periodName?: string;
  /**
   * 备注
   * @type {string}
   * @memberof AddContractPeriodReq
   */
  remark?: string;
  /**
   * 开始时间
   * @type {Date}
   * @memberof AddContractPeriodReq
   */
  startTime?: Date;
}

/**
 *
 * @export
 * @interface AddContractReceivablesReq
 */
export interface AddContractReceivablesReq {
  /**
   * 合同id
   * @type {number}
   * @memberof AddContractReceivablesReq
   */
  contractId?: number;
  /**
   * 期间id
   * @type {number}
   * @memberof AddContractReceivablesReq
   */
  periodId?: number;
  /**
   * 收款方式
   * @type {string}
   * @memberof AddContractReceivablesReq
   */
  receiveMethod?: string;
  /**
   * 收款金额
   * @type {number}
   * @memberof AddContractReceivablesReq
   */
  receiveMoney?: number;
  /**
   * 收款人
   * @type {string}
   * @memberof AddContractReceivablesReq
   */
  receivePerson?: string;
  /**
   * 收款时间
   * @type {Date}
   * @memberof AddContractReceivablesReq
   */
  receiveTime?: Date;
  /**
   * 备注
   * @type {string}
   * @memberof AddContractReceivablesReq
   */
  remark?: string;
}

/**
 *
 * @export
 * @interface AddContractReq
 */
export interface AddContractReq {
  /**
   *
   * @type {Array<AddContractPeriodReq>}
   * @memberof AddContractReq
   */
  addContractPeriodReqs?: Array<AddContractPeriodReq>;
  /**
   * 合同金额
   * @type {number}
   * @memberof AddContractReq
   */
  contractMoney?: number;
  /**
   * 合同名称
   * @type {string}
   * @memberof AddContractReq
   */
  contractName?: string;
  /**
   * 合同编号
   * @type {string}
   * @memberof AddContractReq
   */
  contractNo?: string;
  /**
   * 客户id
   * @type {number}
   * @memberof AddContractReq
   */
  customerId?: number;
  /**
   * 签订时间
   * @type {Date}
   * @memberof AddContractReq
   */
  signTime?: Date;
}

/**
 *
 * @export
 * @interface AddCustomerFollowReq
 */
export interface AddCustomerFollowReq {
  /**
   * 客户id
   * @type {number}
   * @memberof AddCustomerFollowReq
   */
  customerId?: number;
  /**
   * 跟进情况
   * @type {string}
   * @memberof AddCustomerFollowReq
   */
  followCase?: string;
  /**
   * 备注
   * @type {string}
   * @memberof AddCustomerFollowReq
   */
  remark?: string;
}

/**
 *
 * @export
 * @interface AddCustomerReq
 */
export interface AddCustomerReq {
  /**
   * 账户
   * @type {string}
   * @memberof AddCustomerReq
   */
  account?: string;
  /**
   * 地址
   * @type {string}
   * @memberof AddCustomerReq
   */
  address?: string;
  /**
   * 开户行
   * @type {string}
   * @memberof AddCustomerReq
   */
  bank?: string;
  /**
   * 开户名
   * @type {string}
   * @memberof AddCustomerReq
   */
  bankName?: string;
  /**
   * 对接人
   * @type {string}
   * @memberof AddCustomerReq
   */
  connector?: string;
  /**
   * 联系人
   * @type {string}
   * @memberof AddCustomerReq
   */
  contacts?: string;
  /**
   * 统一社会信用码
   * @type {string}
   * @memberof AddCustomerReq
   */
  creditCode?: string;
  /**
   * 客户名称
   * @type {string}
   * @memberof AddCustomerReq
   */
  customerName?: string;
  /**
   * 发票内容
   * @type {string}
   * @memberof AddCustomerReq
   */
  invoiceContent?: string;
  /**
   * 发票类型
   * @type {string}
   * @memberof AddCustomerReq
   */
  invoiceType?: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof AddCustomerReq
   */
  mail?: string;
  /**
   * 手机号码
   * @type {string}
   * @memberof AddCustomerReq
   */
  phone?: string;
  /**
   * 项目代号
   * @type {string}
   * @memberof AddCustomerReq
   */
  projectTarget?: string;
  /**
   * 注册地址
   * @type {string}
   * @memberof AddCustomerReq
   */
  registerAddress?: string;
  /**
   * 备注
   * @type {string}
   * @memberof AddCustomerReq
   */
  remark?: string;
  /**
   * 联系电话
   * @type {string}
   * @memberof AddCustomerReq
   */
  tel?: string;
}

/**
 * 添加详细完整报价请求实体
 * @export
 * @interface AddDetailQuotationReq
 */
export interface AddDetailQuotationReq {
  /**
   * 本次实验种类名称
   * @type {string}
   * @memberof AddDetailQuotationReq
   */
  category: string;
  /**
   * 内容
   * @type {string}
   * @memberof AddDetailQuotationReq
   */
  content: string;
  /**
   * 描述
   * @type {string}
   * @memberof AddDetailQuotationReq
   */
  description?: string;
  /**
   * 实验参数
   * @type {QuotationExperimentEntity}
   * @memberof AddDetailQuotationReq
   */
  quotationExperimentEntity: QuotationExperimentEntity;
  /**
   * 报价费用
   * @type {QuotationInventoryEntity}
   * @memberof AddDetailQuotationReq
   */
  quotationInventoryEntity: QuotationInventoryEntity;
  /**
   * 备注
   * @type {string}
   * @memberof AddDetailQuotationReq
   */
  remark?: string;
}

/**
 *
 * @export
 * @interface AddProjectCategoryReq
 */
export interface AddProjectCategoryReq {
  /**
   * 项目种类
   * @type {string}
   * @memberof AddProjectCategoryReq
   */
  category: string;
}

/**
 * 新增实验标准请求实体
 * @export
 * @interface AddQuotationExperimentReq
 */
export interface AddQuotationExperimentReq {
  /**
   * 动物数量（只）
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  animalCnt: number;
  /**
   * 伴随TK动物数量（只）
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  animaltkCnt: number;
  /**
   * 采血周期
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  bloodPeriod: number;
  /**
   * 每只动物采血点
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  bloodPoint: number;
  /**
   * 临床检验（次数）
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  clinicCnt: number;
  /**
   * 给药次数
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  doesCnt: number;
  /**
   * 给药期天数
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  doesDay: number;
  /**
   * 心电检测（次数）
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  ecgCnt: number;
  /**
   * 组数
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  groupCnt?: number;
  /**
   * 摄食检测（次数）
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  ingestionCnt: number;
  /**
   * 眼科检查（次数）
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  ophthalmologyCnt: number;
  /**
   * 检疫适应期
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  quarantine: number;
  /**
   * 本次报价id ， 默认报价为0
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  quotationid: number;
  /**
   * 恢复天数
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  recoverDay: number;
  /**
   * 体温检测（次数）
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  temperatureCnt: number;
  /**
   *
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  tk?: number;
  /**
   * 体重检测（次数）
   * @type {number}
   * @memberof AddQuotationExperimentReq
   */
  weightCnt: number;
}

/**
 *
 * @export
 * @interface AddQuotationInventoryReq
 */
export interface AddQuotationInventoryReq {
  /**
   * 动物费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  animal?: number;
  /**
   * 动物房费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  animalzoom?: number;
  /**
   * 临床检验费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  cliniccheck?: number;
  /**
   * 临床观察费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  clinicobserve?: number;
  /**
   * 翻倍系数
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  coefficient?: number;
  /**
   * 大体解剖费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  dissection?: number;
  /**
   * 给药费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  does?: number;
  /**
   * 心电检测费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  ecg?: number;
  /**
   * 饲养费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  feeding?: number;
  /**
   * 组织病理费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  histopathology?: number;
  /**
   * 摄食检测费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  ingestion?: number;
  /**
   * 是否是单价 0-单价  1-总计
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  isunit?: number;
  /**
   * 眼科检查费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  ophthalmology?: number;
  /**
   * 其他费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  others?: number;
  /**
   * 制剂配置费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  preparations?: number;
  /**
   * 此次报价id  0为默认报价
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  quotationid?: number;
  /**
   * 研究报告费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  report?: number;
  /**
   * 研究方案费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  scheme?: number;
  /**
   * 体温检测费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  temperature?: number;
  /**
   * TK样本采集费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  tk?: number;
  /**
   * 合计费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  total?: number;
  /**
   * 体重检测费用
   * @type {number}
   * @memberof AddQuotationInventoryReq
   */
  weight?: number;
}

/**
 * 添加报价请求实体
 * @export
 * @interface AddQuotationReq
 */
export interface AddQuotationReq {
  /**
   * 种类
   * @type {number}
   * @memberof AddQuotationReq
   */
  category: number;
  /**
   * 内容
   * @type {string}
   * @memberof AddQuotationReq
   */
  content: string;
  /**
   * 报价金额(单位：万元)
   * @type {number}
   * @memberof AddQuotationReq
   */
  quotation: number;
  /**
   * 备注
   * @type {string}
   * @memberof AddQuotationReq
   */
  remark?: string;
}

/**
 * 新增角色请求实体
 * @export
 * @interface AddRoleReq
 */
export interface AddRoleReq {
  /**
   * 权限Id列表
   * @type {Array<number>}
   * @memberof AddRoleReq
   */
  permissionIds?: Array<number>;
  /**
   * 角色描述
   * @type {string}
   * @memberof AddRoleReq
   */
  roleDesc?: string;
  /**
   * 角色名称
   * @type {string}
   * @memberof AddRoleReq
   */
  roleName: string;
}

/**
 *
 * @export
 * @interface AddUserReq
 */
export interface AddUserReq {
  /**
   * 邮箱
   * @type {string}
   * @memberof AddUserReq
   */
  email: string;
  /**
   * 手机号
   * @type {string}
   * @memberof AddUserReq
   */
  mobile: string;
  /**
   * 密码
   * @type {string}
   * @memberof AddUserReq
   */
  password?: string;
  /**
   * 真实姓名
   * @type {string}
   * @memberof AddUserReq
   */
  realName: string;
  /**
   * 角色id
   * @type {Array<number>}
   * @memberof AddUserReq
   */
  roleId: Array<number>;
  /**
   * 用户名
   * @type {string}
   * @memberof AddUserReq
   */
  userName: string;
}

/**
 *
 * @export
 * @interface GetContractInvoiceResp
 */
export interface GetContractInvoiceResp {
  /**
   * 合同id
   * @type {number}
   * @memberof GetContractInvoiceResp
   */
  contractId?: number;
  /**
   * 合同编号
   * @type {string}
   * @memberof GetContractInvoiceResp
   */
  contractNo?: string;
  /**
   * 主键id
   * @type {number}
   * @memberof GetContractInvoiceResp
   */
  id?: number;
  /**
   * 开票金额
   * @type {number}
   * @memberof GetContractInvoiceResp
   */
  invoiceMoney?: number;
  /**
   * 发票编号
   * @type {string}
   * @memberof GetContractInvoiceResp
   */
  invoiceNo?: string;
  /**
   * 开票人
   * @type {string}
   * @memberof GetContractInvoiceResp
   */
  invoicePerson?: string;
  /**
   * 开票时间
   * @type {Date}
   * @memberof GetContractInvoiceResp
   */
  invoiceTime?: Date;
  /**
   * 期间id
   * @type {number}
   * @memberof GetContractInvoiceResp
   */
  periodId?: number;
  /**
   * 备注
   * @type {string}
   * @memberof GetContractInvoiceResp
   */
  remark?: string;
}

/**
 *
 * @export
 * @interface GetContractPeriodResp
 */
export interface GetContractPeriodResp {
  /**
   *
   * @type {number}
   * @memberof GetContractPeriodResp
   */
  contractId?: number;
  /**
   *
   * @type {Date}
   * @memberof GetContractPeriodResp
   */
  endTime?: Date;
  /**
   *
   * @type {number}
   * @memberof GetContractPeriodResp
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetContractPeriodResp
   */
  periodContent?: string;
  /**
   *
   * @type {number}
   * @memberof GetContractPeriodResp
   */
  periodMoney?: number;
  /**
   *
   * @type {string}
   * @memberof GetContractPeriodResp
   */
  periodName?: string;
  /**
   *
   * @type {string}
   * @memberof GetContractPeriodResp
   */
  remark?: string;
  /**
   *
   * @type {Date}
   * @memberof GetContractPeriodResp
   */
  startTime?: Date;
}

/**
 *
 * @export
 * @interface GetContractReceivablesResp
 */
export interface GetContractReceivablesResp {
  /**
   * 合同id
   * @type {number}
   * @memberof GetContractReceivablesResp
   */
  contractId?: number;
  /**
   * 合同编号
   * @type {string}
   * @memberof GetContractReceivablesResp
   */
  contractNo?: string;
  /**
   * 主键id
   * @type {number}
   * @memberof GetContractReceivablesResp
   */
  id?: number;
  /**
   * 期间id
   * @type {number}
   * @memberof GetContractReceivablesResp
   */
  periodId?: number;
  /**
   * 收款方式
   * @type {string}
   * @memberof GetContractReceivablesResp
   */
  receiveMethod?: string;
  /**
   * 收款金额
   * @type {number}
   * @memberof GetContractReceivablesResp
   */
  receiveMoney?: number;
  /**
   * 收款人
   * @type {string}
   * @memberof GetContractReceivablesResp
   */
  receivePerson?: string;
  /**
   * 收款时间
   * @type {Date}
   * @memberof GetContractReceivablesResp
   */
  receiveTime?: Date;
  /**
   * 备注
   * @type {string}
   * @memberof GetContractReceivablesResp
   */
  remark?: string;
}

/**
 *
 * @export
 * @interface GetContractResp
 */
export interface GetContractResp {
  /**
   * 签订金额
   * @type {number}
   * @memberof GetContractResp
   */
  contractMoney?: number;
  /**
   * 合同名称
   * @type {string}
   * @memberof GetContractResp
   */
  contractName?: string;
  /**
   * 合同编号
   * @type {string}
   * @memberof GetContractResp
   */
  contractNo?: string;
  /**
   * 客户id
   * @type {number}
   * @memberof GetContractResp
   */
  customerId?: number;
  /**
   * 客户名称
   * @type {string}
   * @memberof GetContractResp
   */
  customerName?: string;
  /**
   * 已完成金额
   * @type {number}
   * @memberof GetContractResp
   */
  finishMoney?: number;
  /**
   * id
   * @type {number}
   * @memberof GetContractResp
   */
  id?: number;
  /**
   * 已收款金额
   * @type {number}
   * @memberof GetContractResp
   */
  receiveMoney?: number;
  /**
   * 签订时间
   * @type {Date}
   * @memberof GetContractResp
   */
  signTime?: Date;
  /**
   * 合同状态：0 未完成，1已完成
   * @type {string}
   * @memberof GetContractResp
   */
  status?: string;
  /**
   * 未完成金额
   * @type {number}
   * @memberof GetContractResp
   */
  unFinishMoney?: number;
  /**
   * 未收款金额
   * @type {number}
   * @memberof GetContractResp
   */
  unReceiveMoney?: number;
}

/**
 *
 * @export
 * @interface GetContractTimeSummaryResp
 */
export interface GetContractTimeSummaryResp {
  /**
   * 时间
   * @type {string}
   * @memberof GetContractTimeSummaryResp
   */
  time?: string;
  /**
   * 数值
   * @type {number}
   * @memberof GetContractTimeSummaryResp
   */
  value?: number;
}

/**
 *
 * @export
 * @interface GetCustomerFollowResp
 */
export interface GetCustomerFollowResp {
  /**
   *
   * @type {Date}
   * @memberof GetCustomerFollowResp
   */
  createTime?: Date;
  /**
   *
   * @type {string}
   * @memberof GetCustomerFollowResp
   */
  creator?: string;
  /**
   *
   * @type {number}
   * @memberof GetCustomerFollowResp
   */
  customerId?: number;
  /**
   *
   * @type {string}
   * @memberof GetCustomerFollowResp
   */
  followCase?: string;
  /**
   *
   * @type {number}
   * @memberof GetCustomerFollowResp
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCustomerFollowResp
   */
  remark?: string;
}

/**
 *
 * @export
 * @interface GetCustomerResp
 */
export interface GetCustomerResp {
  /**
   * 账户
   * @type {string}
   * @memberof GetCustomerResp
   */
  account?: string;
  /**
   * 地址
   * @type {string}
   * @memberof GetCustomerResp
   */
  address?: string;
  /**
   * 开户行
   * @type {string}
   * @memberof GetCustomerResp
   */
  bank?: string;
  /**
   * 开户名
   * @type {string}
   * @memberof GetCustomerResp
   */
  bankName?: string;
  /**
   * 对接人
   * @type {string}
   * @memberof GetCustomerResp
   */
  connector?: string;
  /**
   * 联系人
   * @type {string}
   * @memberof GetCustomerResp
   */
  contacts?: string;
  /**
   * 统一社会信用码
   * @type {string}
   * @memberof GetCustomerResp
   */
  creditCode?: string;
  /**
   * 客户名称
   * @type {string}
   * @memberof GetCustomerResp
   */
  customerName?: string;
  /**
   * 主键id
   * @type {number}
   * @memberof GetCustomerResp
   */
  id?: number;
  /**
   * 发票内容
   * @type {string}
   * @memberof GetCustomerResp
   */
  invoiceContent?: string;
  /**
   * 发票类型
   * @type {string}
   * @memberof GetCustomerResp
   */
  invoiceType?: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof GetCustomerResp
   */
  mail?: string;
  /**
   * 手机号码
   * @type {string}
   * @memberof GetCustomerResp
   */
  phone?: string;
  /**
   * 项目代号
   * @type {string}
   * @memberof GetCustomerResp
   */
  projectTarget?: string;
  /**
   * 注册地址
   * @type {string}
   * @memberof GetCustomerResp
   */
  registerAddress?: string;
  /**
   * 备注
   * @type {string}
   * @memberof GetCustomerResp
   */
  remark?: string;
  /**
   * 联系电话
   * @type {string}
   * @memberof GetCustomerResp
   */
  tel?: string;
}

/**
 *
 * @export
 * @interface GetLoginUserInfoResp
 */
export interface GetLoginUserInfoResp {
  /**
   * 邮箱
   * @type {string}
   * @memberof GetLoginUserInfoResp
   */
  email?: string;
  /**
   * 手机号
   * @type {string}
   * @memberof GetLoginUserInfoResp
   */
  mobile?: string;
  /**
   * 真实姓名
   * @type {string}
   * @memberof GetLoginUserInfoResp
   */
  realName?: string;
  /**
   * 令牌
   * @type {string}
   * @memberof GetLoginUserInfoResp
   */
  token?: string;
  /**
   * 用户id
   * @type {number}
   * @memberof GetLoginUserInfoResp
   */
  userId?: number;
  /**
   * 用户名
   * @type {string}
   * @memberof GetLoginUserInfoResp
   */
  userName?: string;
}

/**
 *
 * @export
 * @interface GetQuotationCategoryListResp
 */
export interface GetQuotationCategoryListResp {
  /**
   *
   * @type {string}
   * @memberof GetQuotationCategoryListResp
   */
  category?: string;
  /**
   *
   * @type {number}
   * @memberof GetQuotationCategoryListResp
   */
  id?: number;
}

/**
 *
 * @export
 * @interface GetQuotationExperimentByConditonReq
 */
export interface GetQuotationExperimentByConditonReq {
  /**
   * 动物种类
   * @type {string}
   * @memberof GetQuotationExperimentByConditonReq
   */
  animal?: string;
  /**
   * 报价Id 0-默认报价
   * @type {number}
   * @memberof GetQuotationExperimentByConditonReq
   */
  quotationId?: number;
  /**
   * 毒性
   * @type {number}
   * @memberof GetQuotationExperimentByConditonReq
   */
  virulence?: number;
  /**
   * 星期
   * @type {number}
   * @memberof GetQuotationExperimentByConditonReq
   */
  week?: number;
}

/**
 *
 * @export
 * @interface GetQuotationInfoResp
 */
export interface GetQuotationInfoResp {
  /**
   * 种类名称
   * @type {string}
   * @memberof GetQuotationInfoResp
   */
  categoryName?: string;
  /**
   * 内容
   * @type {string}
   * @memberof GetQuotationInfoResp
   */
  content?: string;
  /**
   *
   * @type {number}
   * @memberof GetQuotationInfoResp
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof GetQuotationInfoResp
   */
  quotation?: number;
  /**
   * 备注
   * @type {string}
   * @memberof GetQuotationInfoResp
   */
  remark?: string;
}

/**
 *
 * @export
 * @interface GetQuotationInventoryByConditonReq
 */
export interface GetQuotationInventoryByConditonReq {
  /**
   * 动物种类
   * @type {string}
   * @memberof GetQuotationInventoryByConditonReq
   */
  animalCategory?: string;
  /**
   * 是否是单价 0-单价 1-总计
   * @type {number}
   * @memberof GetQuotationInventoryByConditonReq
   */
  isunit?: number;
  /**
   * 此次报价id  0为默认报价
   * @type {number}
   * @memberof GetQuotationInventoryByConditonReq
   */
  quotationid?: number;
  /**
   * 毒性 0-长毒 1-急毒
   * @type {number}
   * @memberof GetQuotationInventoryByConditonReq
   */
  virulence?: number;
  /**
   * 星期
   * @type {number}
   * @memberof GetQuotationInventoryByConditonReq
   */
  week?: number;
}

/**
 *
 * @export
 * @interface GetRoleInfoResp
 */
export interface GetRoleInfoResp {
  /**
   * 角色id
   * @type {number}
   * @memberof GetRoleInfoResp
   */
  id?: number;
  /**
   * 权限id列表
   * @type {Array<number>}
   * @memberof GetRoleInfoResp
   */
  permissionIdList?: Array<number>;
  /**
   * 角色描述
   * @type {string}
   * @memberof GetRoleInfoResp
   */
  roleDesc?: string;
  /**
   * 角色名称
   * @type {string}
   * @memberof GetRoleInfoResp
   */
  roleName?: string;
}

/**
 *
 * @export
 * @interface GetUserInfoResp
 */
export interface GetUserInfoResp {
  /**
   *
   * @type {boolean}
   * @memberof GetUserInfoResp
   */
  canDelete?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetUserInfoResp
   */
  canEdit?: boolean;
  /**
   *
   * @type {Date}
   * @memberof GetUserInfoResp
   */
  createTime?: Date;
  /**
   *
   * @type {string}
   * @memberof GetUserInfoResp
   */
  email?: string;
  /**
   *
   * @type {number}
   * @memberof GetUserInfoResp
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetUserInfoResp
   */
  mobile?: string;
  /**
   *
   * @type {string}
   * @memberof GetUserInfoResp
   */
  oaId?: string;
  /**
   *
   * @type {string}
   * @memberof GetUserInfoResp
   */
  orgId?: string;
  /**
   *
   * @type {string}
   * @memberof GetUserInfoResp
   */
  parentId?: string;
  /**
   *
   * @type {string}
   * @memberof GetUserInfoResp
   */
  realName?: string;
  /**
   *
   * @type {Array<number>}
   * @memberof GetUserInfoResp
   */
  roleId?: Array<number>;
  /**
   *
   * @type {string}
   * @memberof GetUserInfoResp
   */
  roleIds?: string;
  /**
   *
   * @type {string}
   * @memberof GetUserInfoResp
   */
  roleName?: string;
  /**
   *
   * @type {Date}
   * @memberof GetUserInfoResp
   */
  updateTime?: Date;
  /**
   *
   * @type {string}
   * @memberof GetUserInfoResp
   */
  userName?: string;
}

/**
 *
 * @export
 * @interface ListPermissionResp
 */
export interface ListPermissionResp {
  /**
   * 权限id
   * @type {number}
   * @memberof ListPermissionResp
   */
  id?: number;
  /**
   * 权限名称
   * @type {string}
   * @memberof ListPermissionResp
   */
  name?: string;
  /**
   * 上级权限id
   * @type {number}
   * @memberof ListPermissionResp
   */
  parentId?: number;
  /**
   * 上级权限名称
   * @type {string}
   * @memberof ListPermissionResp
   */
  parentName?: string;
  /**
   * 权限标识
   * @type {string}
   * @memberof ListPermissionResp
   */
  perms?: string;
  /**
   * 图表对应的图片名称
   * @type {string}
   * @memberof ListPermissionResp
   */
  picName?: string;
  /**
   * 类型
   * @type {number}
   * @memberof ListPermissionResp
   */
  type?: number;
}

/**
 * 登录请求实体
 * @export
 * @interface LoginReq
 */
export interface LoginReq {
  /**
   * 验证码
   * @type {string}
   * @memberof LoginReq
   */
  captcha: string;
  /**
   * 密码
   * @type {string}
   * @memberof LoginReq
   */
  password: string;
  /**
   * 用户名
   * @type {string}
   * @memberof LoginReq
   */
  userName: string;
}

/**
 *
 * @export
 * @interface PageInfoGetContractInvoiceResp
 */
export interface PageInfoGetContractInvoiceResp {
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  endRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  firstPage?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractInvoiceResp
   */
  hasNextPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractInvoiceResp
   */
  hasPreviousPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractInvoiceResp
   */
  isFirstPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractInvoiceResp
   */
  isLastPage?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  lastPage?: number;
  /**
   *
   * @type {Array<GetContractInvoiceResp>}
   * @memberof PageInfoGetContractInvoiceResp
   */
  list?: Array<GetContractInvoiceResp>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  navigateFirstPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  navigateLastPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  navigatePages?: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PageInfoGetContractInvoiceResp
   */
  navigatepageNums?: Array<number>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  nextPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  pageNum?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  pages?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  prePage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  startRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractInvoiceResp
   */
  total?: number;
}

/**
 *
 * @export
 * @interface PageInfoGetContractReceivablesResp
 */
export interface PageInfoGetContractReceivablesResp {
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  endRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  firstPage?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractReceivablesResp
   */
  hasNextPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractReceivablesResp
   */
  hasPreviousPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractReceivablesResp
   */
  isFirstPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractReceivablesResp
   */
  isLastPage?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  lastPage?: number;
  /**
   *
   * @type {Array<GetContractReceivablesResp>}
   * @memberof PageInfoGetContractReceivablesResp
   */
  list?: Array<GetContractReceivablesResp>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  navigateFirstPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  navigateLastPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  navigatePages?: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PageInfoGetContractReceivablesResp
   */
  navigatepageNums?: Array<number>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  nextPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  pageNum?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  pages?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  prePage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  startRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractReceivablesResp
   */
  total?: number;
}

/**
 *
 * @export
 * @interface PageInfoGetContractResp
 */
export interface PageInfoGetContractResp {
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  endRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  firstPage?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractResp
   */
  hasNextPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractResp
   */
  hasPreviousPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractResp
   */
  isFirstPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetContractResp
   */
  isLastPage?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  lastPage?: number;
  /**
   *
   * @type {Array<GetContractResp>}
   * @memberof PageInfoGetContractResp
   */
  list?: Array<GetContractResp>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  navigateFirstPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  navigateLastPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  navigatePages?: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PageInfoGetContractResp
   */
  navigatepageNums?: Array<number>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  nextPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  pageNum?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  pages?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  prePage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  startRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetContractResp
   */
  total?: number;
}

/**
 *
 * @export
 * @interface PageInfoGetCustomerResp
 */
export interface PageInfoGetCustomerResp {
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  endRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  firstPage?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetCustomerResp
   */
  hasNextPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetCustomerResp
   */
  hasPreviousPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetCustomerResp
   */
  isFirstPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetCustomerResp
   */
  isLastPage?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  lastPage?: number;
  /**
   *
   * @type {Array<GetCustomerResp>}
   * @memberof PageInfoGetCustomerResp
   */
  list?: Array<GetCustomerResp>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  navigateFirstPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  navigateLastPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  navigatePages?: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PageInfoGetCustomerResp
   */
  navigatepageNums?: Array<number>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  nextPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  pageNum?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  pages?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  prePage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  startRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetCustomerResp
   */
  total?: number;
}

/**
 *
 * @export
 * @interface PageInfoGetQuotationCategoryListResp
 */
export interface PageInfoGetQuotationCategoryListResp {
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  endRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  firstPage?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  hasNextPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  hasPreviousPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  isFirstPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  isLastPage?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  lastPage?: number;
  /**
   *
   * @type {Array<GetQuotationCategoryListResp>}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  list?: Array<GetQuotationCategoryListResp>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  navigateFirstPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  navigateLastPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  navigatePages?: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  navigatepageNums?: Array<number>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  nextPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  pageNum?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  pages?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  prePage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  startRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationCategoryListResp
   */
  total?: number;
}

/**
 *
 * @export
 * @interface PageInfoGetQuotationInfoResp
 */
export interface PageInfoGetQuotationInfoResp {
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  endRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  firstPage?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetQuotationInfoResp
   */
  hasNextPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetQuotationInfoResp
   */
  hasPreviousPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetQuotationInfoResp
   */
  isFirstPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetQuotationInfoResp
   */
  isLastPage?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  lastPage?: number;
  /**
   *
   * @type {Array<GetQuotationInfoResp>}
   * @memberof PageInfoGetQuotationInfoResp
   */
  list?: Array<GetQuotationInfoResp>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  navigateFirstPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  navigateLastPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  navigatePages?: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PageInfoGetQuotationInfoResp
   */
  navigatepageNums?: Array<number>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  nextPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  pageNum?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  pages?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  prePage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  startRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetQuotationInfoResp
   */
  total?: number;
}

/**
 *
 * @export
 * @interface PageInfoGetRoleInfoResp
 */
export interface PageInfoGetRoleInfoResp {
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  endRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  firstPage?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetRoleInfoResp
   */
  hasNextPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetRoleInfoResp
   */
  hasPreviousPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetRoleInfoResp
   */
  isFirstPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetRoleInfoResp
   */
  isLastPage?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  lastPage?: number;
  /**
   *
   * @type {Array<GetRoleInfoResp>}
   * @memberof PageInfoGetRoleInfoResp
   */
  list?: Array<GetRoleInfoResp>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  navigateFirstPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  navigateLastPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  navigatePages?: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PageInfoGetRoleInfoResp
   */
  navigatepageNums?: Array<number>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  nextPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  pageNum?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  pages?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  prePage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  startRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetRoleInfoResp
   */
  total?: number;
}

/**
 *
 * @export
 * @interface PageInfoGetUserInfoResp
 */
export interface PageInfoGetUserInfoResp {
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  endRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  firstPage?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetUserInfoResp
   */
  hasNextPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetUserInfoResp
   */
  hasPreviousPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetUserInfoResp
   */
  isFirstPage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageInfoGetUserInfoResp
   */
  isLastPage?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  lastPage?: number;
  /**
   *
   * @type {Array<GetUserInfoResp>}
   * @memberof PageInfoGetUserInfoResp
   */
  list?: Array<GetUserInfoResp>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  navigateFirstPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  navigateLastPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  navigatePages?: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PageInfoGetUserInfoResp
   */
  navigatepageNums?: Array<number>;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  nextPage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  pageNum?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  pages?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  prePage?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  startRow?: number;
  /**
   *
   * @type {number}
   * @memberof PageInfoGetUserInfoResp
   */
  total?: number;
}

/**
 *
 * @export
 * @interface QuotationExperimentEntity
 */
export interface QuotationExperimentEntity {
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  animalCnt?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  animaltkCnt?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  bloodPeriod?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  bloodPoint?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  clinicCnt?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  doesCnt?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  doesDay?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  ecgCnt?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  groupCnt?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  ingestionCnt?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  ophthalmologyCnt?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  quarantine?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  quotationid?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  recoverday?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  temperatureCnt?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  tk?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationExperimentEntity
   */
  weightCnt?: number;
}

/**
 *
 * @export
 * @interface QuotationInventoryEntity
 */
export interface QuotationInventoryEntity {
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  animal?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  animalzoom?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  cliniccheck?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  clinicobserve?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  coefficient?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  dissection?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  does?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  ecg?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  feeding?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  histopathology?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  ingestion?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  isunit?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  ophthalmology?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  others?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  preparations?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  quotationid?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  report?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  scheme?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  temperature?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  tk?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  total?: number;
  /**
   *
   * @type {number}
   * @memberof QuotationInventoryEntity
   */
  weight?: number;
}

/**
 *
 * @export
 * @interface Result
 */
export interface Result {
  /**
   *
   * @type {any}
   * @memberof Result
   */
  data?: any;
  /**
   *
   * @type {string}
   * @memberof Result
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof Result
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof Result
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultGetContractInvoiceResp
 */
export interface ResultGetContractInvoiceResp {
  /**
   *
   * @type {GetContractInvoiceResp}
   * @memberof ResultGetContractInvoiceResp
   */
  data?: GetContractInvoiceResp;
  /**
   *
   * @type {string}
   * @memberof ResultGetContractInvoiceResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultGetContractInvoiceResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultGetContractInvoiceResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultGetContractPeriodResp
 */
export interface ResultGetContractPeriodResp {
  /**
   *
   * @type {GetContractPeriodResp}
   * @memberof ResultGetContractPeriodResp
   */
  data?: GetContractPeriodResp;
  /**
   *
   * @type {string}
   * @memberof ResultGetContractPeriodResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultGetContractPeriodResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultGetContractPeriodResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultGetContractReceivablesResp
 */
export interface ResultGetContractReceivablesResp {
  /**
   *
   * @type {GetContractReceivablesResp}
   * @memberof ResultGetContractReceivablesResp
   */
  data?: GetContractReceivablesResp;
  /**
   *
   * @type {string}
   * @memberof ResultGetContractReceivablesResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultGetContractReceivablesResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultGetContractReceivablesResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultGetContractResp
 */
export interface ResultGetContractResp {
  /**
   *
   * @type {GetContractResp}
   * @memberof ResultGetContractResp
   */
  data?: GetContractResp;
  /**
   *
   * @type {string}
   * @memberof ResultGetContractResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultGetContractResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultGetContractResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultGetCustomerResp
 */
export interface ResultGetCustomerResp {
  /**
   *
   * @type {GetCustomerResp}
   * @memberof ResultGetCustomerResp
   */
  data?: GetCustomerResp;
  /**
   *
   * @type {string}
   * @memberof ResultGetCustomerResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultGetCustomerResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultGetCustomerResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultGetLoginUserInfoResp
 */
export interface ResultGetLoginUserInfoResp {
  /**
   *
   * @type {GetLoginUserInfoResp}
   * @memberof ResultGetLoginUserInfoResp
   */
  data?: GetLoginUserInfoResp;
  /**
   *
   * @type {string}
   * @memberof ResultGetLoginUserInfoResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultGetLoginUserInfoResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultGetLoginUserInfoResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultGetRoleInfoResp
 */
export interface ResultGetRoleInfoResp {
  /**
   *
   * @type {GetRoleInfoResp}
   * @memberof ResultGetRoleInfoResp
   */
  data?: GetRoleInfoResp;
  /**
   *
   * @type {string}
   * @memberof ResultGetRoleInfoResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultGetRoleInfoResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultGetRoleInfoResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultGetUserInfoResp
 */
export interface ResultGetUserInfoResp {
  /**
   *
   * @type {GetUserInfoResp}
   * @memberof ResultGetUserInfoResp
   */
  data?: GetUserInfoResp;
  /**
   *
   * @type {string}
   * @memberof ResultGetUserInfoResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultGetUserInfoResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultGetUserInfoResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultListGetContractInvoiceResp
 */
export interface ResultListGetContractInvoiceResp {
  /**
   *
   * @type {Array<GetContractInvoiceResp>}
   * @memberof ResultListGetContractInvoiceResp
   */
  data?: Array<GetContractInvoiceResp>;
  /**
   *
   * @type {string}
   * @memberof ResultListGetContractInvoiceResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultListGetContractInvoiceResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultListGetContractInvoiceResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultListGetContractPeriodResp
 */
export interface ResultListGetContractPeriodResp {
  /**
   *
   * @type {Array<GetContractPeriodResp>}
   * @memberof ResultListGetContractPeriodResp
   */
  data?: Array<GetContractPeriodResp>;
  /**
   *
   * @type {string}
   * @memberof ResultListGetContractPeriodResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultListGetContractPeriodResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultListGetContractPeriodResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultListGetContractReceivablesResp
 */
export interface ResultListGetContractReceivablesResp {
  /**
   *
   * @type {Array<GetContractReceivablesResp>}
   * @memberof ResultListGetContractReceivablesResp
   */
  data?: Array<GetContractReceivablesResp>;
  /**
   *
   * @type {string}
   * @memberof ResultListGetContractReceivablesResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultListGetContractReceivablesResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultListGetContractReceivablesResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultListGetContractTimeSummaryResp
 */
export interface ResultListGetContractTimeSummaryResp {
  /**
   *
   * @type {Array<GetContractTimeSummaryResp>}
   * @memberof ResultListGetContractTimeSummaryResp
   */
  data?: Array<GetContractTimeSummaryResp>;
  /**
   *
   * @type {string}
   * @memberof ResultListGetContractTimeSummaryResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultListGetContractTimeSummaryResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultListGetContractTimeSummaryResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultListGetCustomerFollowResp
 */
export interface ResultListGetCustomerFollowResp {
  /**
   *
   * @type {Array<GetCustomerFollowResp>}
   * @memberof ResultListGetCustomerFollowResp
   */
  data?: Array<GetCustomerFollowResp>;
  /**
   *
   * @type {string}
   * @memberof ResultListGetCustomerFollowResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultListGetCustomerFollowResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultListGetCustomerFollowResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultListListPermissionResp
 */
export interface ResultListListPermissionResp {
  /**
   *
   * @type {Array<ListPermissionResp>}
   * @memberof ResultListListPermissionResp
   */
  data?: Array<ListPermissionResp>;
  /**
   *
   * @type {string}
   * @memberof ResultListListPermissionResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultListListPermissionResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultListListPermissionResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultListZtreeResp
 */
export interface ResultListZtreeResp {
  /**
   *
   * @type {Array<ZtreeResp>}
   * @memberof ResultListZtreeResp
   */
  data?: Array<ZtreeResp>;
  /**
   *
   * @type {string}
   * @memberof ResultListZtreeResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultListZtreeResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultListZtreeResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultPageInfoGetContractInvoiceResp
 */
export interface ResultPageInfoGetContractInvoiceResp {
  /**
   *
   * @type {PageInfoGetContractInvoiceResp}
   * @memberof ResultPageInfoGetContractInvoiceResp
   */
  data?: PageInfoGetContractInvoiceResp;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetContractInvoiceResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetContractInvoiceResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultPageInfoGetContractInvoiceResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultPageInfoGetContractReceivablesResp
 */
export interface ResultPageInfoGetContractReceivablesResp {
  /**
   *
   * @type {PageInfoGetContractReceivablesResp}
   * @memberof ResultPageInfoGetContractReceivablesResp
   */
  data?: PageInfoGetContractReceivablesResp;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetContractReceivablesResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetContractReceivablesResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultPageInfoGetContractReceivablesResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultPageInfoGetContractResp
 */
export interface ResultPageInfoGetContractResp {
  /**
   *
   * @type {PageInfoGetContractResp}
   * @memberof ResultPageInfoGetContractResp
   */
  data?: PageInfoGetContractResp;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetContractResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetContractResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultPageInfoGetContractResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultPageInfoGetCustomerResp
 */
export interface ResultPageInfoGetCustomerResp {
  /**
   *
   * @type {PageInfoGetCustomerResp}
   * @memberof ResultPageInfoGetCustomerResp
   */
  data?: PageInfoGetCustomerResp;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetCustomerResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetCustomerResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultPageInfoGetCustomerResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultPageInfoGetQuotationCategoryListResp
 */
export interface ResultPageInfoGetQuotationCategoryListResp {
  /**
   *
   * @type {PageInfoGetQuotationCategoryListResp}
   * @memberof ResultPageInfoGetQuotationCategoryListResp
   */
  data?: PageInfoGetQuotationCategoryListResp;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetQuotationCategoryListResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetQuotationCategoryListResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultPageInfoGetQuotationCategoryListResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultPageInfoGetQuotationInfoResp
 */
export interface ResultPageInfoGetQuotationInfoResp {
  /**
   *
   * @type {PageInfoGetQuotationInfoResp}
   * @memberof ResultPageInfoGetQuotationInfoResp
   */
  data?: PageInfoGetQuotationInfoResp;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetQuotationInfoResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetQuotationInfoResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultPageInfoGetQuotationInfoResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultPageInfoGetRoleInfoResp
 */
export interface ResultPageInfoGetRoleInfoResp {
  /**
   *
   * @type {PageInfoGetRoleInfoResp}
   * @memberof ResultPageInfoGetRoleInfoResp
   */
  data?: PageInfoGetRoleInfoResp;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetRoleInfoResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetRoleInfoResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultPageInfoGetRoleInfoResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultPageInfoGetUserInfoResp
 */
export interface ResultPageInfoGetUserInfoResp {
  /**
   *
   * @type {PageInfoGetUserInfoResp}
   * @memberof ResultPageInfoGetUserInfoResp
   */
  data?: PageInfoGetUserInfoResp;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetUserInfoResp
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultPageInfoGetUserInfoResp
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultPageInfoGetUserInfoResp
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultQuotationExperimentEntity
 */
export interface ResultQuotationExperimentEntity {
  /**
   *
   * @type {QuotationExperimentEntity}
   * @memberof ResultQuotationExperimentEntity
   */
  data?: QuotationExperimentEntity;
  /**
   *
   * @type {string}
   * @memberof ResultQuotationExperimentEntity
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultQuotationExperimentEntity
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultQuotationExperimentEntity
   */
  status?: number;
}

/**
 *
 * @export
 * @interface ResultQuotationInventoryEntity
 */
export interface ResultQuotationInventoryEntity {
  /**
   *
   * @type {QuotationInventoryEntity}
   * @memberof ResultQuotationInventoryEntity
   */
  data?: QuotationInventoryEntity;
  /**
   *
   * @type {string}
   * @memberof ResultQuotationInventoryEntity
   */
  msg?: string;
  /**
   *
   * @type {string}
   * @memberof ResultQuotationInventoryEntity
   */
  respTime?: string;
  /**
   *
   * @type {number}
   * @memberof ResultQuotationInventoryEntity
   */
  status?: number;
}

/**
 *
 * @export
 * @interface UpdateContractInvoiceReq
 */
export interface UpdateContractInvoiceReq {
  /**
   * 合同id
   * @type {number}
   * @memberof UpdateContractInvoiceReq
   */
  contractId?: number;
  /**
   * 主键id
   * @type {number}
   * @memberof UpdateContractInvoiceReq
   */
  id?: number;
  /**
   * 发票金额
   * @type {number}
   * @memberof UpdateContractInvoiceReq
   */
  invoiceMoney?: number;
  /**
   * 发票编号
   * @type {string}
   * @memberof UpdateContractInvoiceReq
   */
  invoiceNo?: string;
  /**
   * 开票人
   * @type {string}
   * @memberof UpdateContractInvoiceReq
   */
  invoicePerson?: string;
  /**
   * 开票时间
   * @type {Date}
   * @memberof UpdateContractInvoiceReq
   */
  invoiceTime?: Date;
  /**
   * 期间id
   * @type {number}
   * @memberof UpdateContractInvoiceReq
   */
  periodId?: number;
  /**
   * 备注
   * @type {string}
   * @memberof UpdateContractInvoiceReq
   */
  remark?: string;
}

/**
 *
 * @export
 * @interface UpdateContractPeriodReq
 */
export interface UpdateContractPeriodReq {
  /**
   * 合同id
   * @type {number}
   * @memberof UpdateContractPeriodReq
   */
  contractId?: number;
  /**
   * 结束时间
   * @type {Date}
   * @memberof UpdateContractPeriodReq
   */
  endTime?: Date;
  /**
   * 主键id
   * @type {number}
   * @memberof UpdateContractPeriodReq
   */
  id?: number;
  /**
   * 期间内容
   * @type {string}
   * @memberof UpdateContractPeriodReq
   */
  periodContent?: string;
  /**
   * 期间金额
   * @type {number}
   * @memberof UpdateContractPeriodReq
   */
  periodMoney?: number;
  /**
   * 期间名称
   * @type {string}
   * @memberof UpdateContractPeriodReq
   */
  periodName?: string;
  /**
   * 备注
   * @type {string}
   * @memberof UpdateContractPeriodReq
   */
  remark?: string;
  /**
   * 开始时间
   * @type {Date}
   * @memberof UpdateContractPeriodReq
   */
  startTime?: Date;
}

/**
 *
 * @export
 * @interface UpdateContractReceivablesReq
 */
export interface UpdateContractReceivablesReq {
  /**
   * 合同id
   * @type {number}
   * @memberof UpdateContractReceivablesReq
   */
  contractId?: number;
  /**
   * 主键id
   * @type {number}
   * @memberof UpdateContractReceivablesReq
   */
  id?: number;
  /**
   * 期间id
   * @type {number}
   * @memberof UpdateContractReceivablesReq
   */
  periodId?: number;
  /**
   * 收款方式
   * @type {string}
   * @memberof UpdateContractReceivablesReq
   */
  receiveMethod?: string;
  /**
   * 收款金额
   * @type {number}
   * @memberof UpdateContractReceivablesReq
   */
  receiveMoney?: number;
  /**
   * 收款人
   * @type {string}
   * @memberof UpdateContractReceivablesReq
   */
  receivePerson?: string;
  /**
   * 收款时间
   * @type {Date}
   * @memberof UpdateContractReceivablesReq
   */
  receiveTime?: Date;
  /**
   * 备注
   * @type {string}
   * @memberof UpdateContractReceivablesReq
   */
  remark?: string;
}

/**
 *
 * @export
 * @interface UpdateContractReq
 */
export interface UpdateContractReq {
  /**
   * 合同金额
   * @type {number}
   * @memberof UpdateContractReq
   */
  contractMoney?: number;
  /**
   * 合同名称
   * @type {string}
   * @memberof UpdateContractReq
   */
  contractName?: string;
  /**
   * 合同编号
   * @type {string}
   * @memberof UpdateContractReq
   */
  contractNo?: string;
  /**
   * 客户id
   * @type {number}
   * @memberof UpdateContractReq
   */
  customerId?: number;
  /**
   * 主键id
   * @type {number}
   * @memberof UpdateContractReq
   */
  id?: number;
  /**
   * 签订时间
   * @type {Date}
   * @memberof UpdateContractReq
   */
  signTime?: Date;
}

/**
 *
 * @export
 * @interface UpdateCustomerReq
 */
export interface UpdateCustomerReq {
  /**
   * 账户
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  account?: string;
  /**
   * 地址
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  address?: string;
  /**
   * 开户行
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  bank?: string;
  /**
   * 开户名
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  bankName?: string;
  /**
   * 对接人
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  connector?: string;
  /**
   * 联系人
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  contacts?: string;
  /**
   * 统一社会信用码
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  creditCode?: string;
  /**
   * 客户名称
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  customerName?: string;
  /**
   * 主键id
   * @type {number}
   * @memberof UpdateCustomerReq
   */
  id?: number;
  /**
   * 发票内容
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  invoiceContent?: string;
  /**
   * 发票类型
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  invoiceType?: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  mail?: string;
  /**
   * 手机号码
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  phone?: string;
  /**
   * 项目代号
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  projectTarget?: string;
  /**
   * 注册地址
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  registerAddress?: string;
  /**
   * 备注
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  remark?: string;
  /**
   * 联系电话
   * @type {string}
   * @memberof UpdateCustomerReq
   */
  tel?: string;
}

/**
 *
 * @export
 * @interface UpdatePwdReq
 */
export interface UpdatePwdReq {
  /**
   * 新密码
   * @type {string}
   * @memberof UpdatePwdReq
   */
  newPassword: string;
  /**
   * 旧密码
   * @type {string}
   * @memberof UpdatePwdReq
   */
  oldPassword: string;
  /**
   * 用户id
   * @type {number}
   * @memberof UpdatePwdReq
   */
  userId?: number;
}

/**
 * 更新报价请求实体
 * @export
 * @interface UpdateQuotationConditionReq
 */
export interface UpdateQuotationConditionReq {
  /**
   * 种类名称
   * @type {string}
   * @memberof UpdateQuotationConditionReq
   */
  category?: string;
  /**
   * 内容
   * @type {string}
   * @memberof UpdateQuotationConditionReq
   */
  content: string;
  /**
   * 报价id
   * @type {number}
   * @memberof UpdateQuotationConditionReq
   */
  id: number;
  /**
   * 备注
   * @type {string}
   * @memberof UpdateQuotationConditionReq
   */
  remark?: string;
}

/**
 *
 * @export
 * @interface UpdateQuotationInventoryReq
 */
export interface UpdateQuotationInventoryReq {
  /**
   * 动物费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  animal?: number;
  /**
   * 动物种类
   * @type {string}
   * @memberof UpdateQuotationInventoryReq
   */
  animalcategory?: string;
  /**
   * 动物房费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  animalzoom?: number;
  /**
   * 临床检验费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  cliniccheck?: number;
  /**
   * 临床观察费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  clinicobserve?: number;
  /**
   * 翻倍系数
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  coefficient?: number;
  /**
   * 大体解剖费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  dissection?: number;
  /**
   * 给药费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  does?: number;
  /**
   * 心电检测费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  ecg?: number;
  /**
   * 饲养费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  feeding?: number;
  /**
   * 组织病理费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  histopathology?: number;
  /**
   *
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  id?: number;
  /**
   * 摄食检测费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  ingestion?: number;
  /**
   * 是否是单价
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  isunit?: number;
  /**
   * 眼科检查费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  ophthalmology?: number;
  /**
   * 其他费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  others?: number;
  /**
   * 制剂配置费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  preparations?: number;
  /**
   * 此次报价id  0为默认
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  quotationid?: number;
  /**
   * 研究报告费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  report?: number;
  /**
   * 研究方案费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  scheme?: number;
  /**
   * 体温检测费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  temperature?: number;
  /**
   * TK样本采集费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  tk?: number;
  /**
   * 合计费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  total?: number;
  /**
   * 毒性 0-长毒 1-急毒
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  virulence?: number;
  /**
   * 星期
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  week?: number;
  /**
   * 体重检测费用
   * @type {number}
   * @memberof UpdateQuotationInventoryReq
   */
  weight?: number;
}

/**
 * 修改角色请求实体
 * @export
 * @interface UpdateRoleReq
 */
export interface UpdateRoleReq {
  /**
   * 角色id
   * @type {number}
   * @memberof UpdateRoleReq
   */
  id: number;
  /**
   * 权限Id列表
   * @type {Array<number>}
   * @memberof UpdateRoleReq
   */
  permissionIds?: Array<number>;
  /**
   * 角色描述
   * @type {string}
   * @memberof UpdateRoleReq
   */
  roleDesc?: string;
  /**
   * 角色名称
   * @type {string}
   * @memberof UpdateRoleReq
   */
  roleName: string;
}

/**
 *
 * @export
 * @interface UpdateUserReq
 */
export interface UpdateUserReq {
  /**
   * 邮箱
   * @type {string}
   * @memberof UpdateUserReq
   */
  email: string;
  /**
   * 用户id
   * @type {number}
   * @memberof UpdateUserReq
   */
  id: number;
  /**
   * 手机号
   * @type {string}
   * @memberof UpdateUserReq
   */
  mobile: string;
  /**
   * 真实姓名
   * @type {string}
   * @memberof UpdateUserReq
   */
  realName: string;
  /**
   * 角色id
   * @type {Array<number>}
   * @memberof UpdateUserReq
   */
  roleId: Array<number>;
}

/**
 *
 * @export
 * @interface ZtreeResp
 */
export interface ZtreeResp {
  /**
   * 是否选中
   * @type {boolean}
   * @memberof ZtreeResp
   */
  chkDisabled?: boolean;
  /**
   * 权限id
   * @type {number}
   * @memberof ZtreeResp
   */
  id?: number;
  /**
   * 权限名称
   * @type {string}
   * @memberof ZtreeResp
   */
  name?: string;
  /**
   * 是否展开
   * @type {boolean}
   * @memberof ZtreeResp
   */
  open?: boolean;
  /**
   * 上级权限id
   * @type {number}
   * @memberof ZtreeResp
   */
  pId?: number;
}

/**
 * ContractControllerApi - fetch parameter creator
 * @export
 */
export const ContractControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加合同
     * @param {AddContractReq} addContractReq addContractReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractUsingPOST(addContractReq: AddContractReq, options: any = {}): FetchArgs {
      // verify required parameter 'addContractReq' is not null or undefined
      if (addContractReq === null || addContractReq === undefined) {
        throw new RequiredError(
          "addContractReq",
          "Required parameter addContractReq was null or undefined when calling addContractUsingPOST."
        );
      }
      const localVarPath = `/contract/addContract`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"AddContractReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(addContractReq || {}) : addContractReq || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 删除合同
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserUsingPOST(contractId: number, options: any = {}): FetchArgs {
      // verify required parameter 'contractId' is not null or undefined
      if (contractId === null || contractId === undefined) {
        throw new RequiredError("contractId", "Required parameter contractId was null or undefined when calling deleteUserUsingPOST.");
      }
      const localVarPath = `/contract/deleteContract`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (contractId !== undefined) {
        localVarQueryParameter["contractId"] = contractId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 导出合同列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {number} [status] 状态 0未完成 1已完成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportContractUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      status?: number,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/contract/exportContract`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageCurrent !== undefined) {
        localVarQueryParameter["pageCurrent"] = pageCurrent;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["orderBy"] = orderBy;
      }

      if (descOrAsc !== undefined) {
        localVarQueryParameter["descOrAsc"] = descOrAsc;
      }

      if (pageBegin !== undefined) {
        localVarQueryParameter["pageBegin"] = pageBegin;
      }

      if (contractNo !== undefined) {
        localVarQueryParameter["contractNo"] = contractNo;
      }

      if (status !== undefined) {
        localVarQueryParameter["status"] = status;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取合同的发票信息
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractInvoiceUsingGET(contractId: number, options: any = {}): FetchArgs {
      // verify required parameter 'contractId' is not null or undefined
      if (contractId === null || contractId === undefined) {
        throw new RequiredError(
          "contractId",
          "Required parameter contractId was null or undefined when calling getContractInvoiceUsingGET."
        );
      }
      const localVarPath = `/contract/getContractInvoice`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (contractId !== undefined) {
        localVarQueryParameter["contractId"] = contractId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取合同的期间信息
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractPeriodUsingGET(contractId: number, options: any = {}): FetchArgs {
      // verify required parameter 'contractId' is not null or undefined
      if (contractId === null || contractId === undefined) {
        throw new RequiredError(
          "contractId",
          "Required parameter contractId was null or undefined when calling getContractPeriodUsingGET."
        );
      }
      const localVarPath = `/contract/getContractPeriod`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (contractId !== undefined) {
        localVarQueryParameter["contractId"] = contractId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取合同的收款信息
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractReceivablesUsingGET(contractId: number, options: any = {}): FetchArgs {
      // verify required parameter 'contractId' is not null or undefined
      if (contractId === null || contractId === undefined) {
        throw new RequiredError(
          "contractId",
          "Required parameter contractId was null or undefined when calling getContractReceivablesUsingGET."
        );
      }
      const localVarPath = `/contract/getContractReceivables`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (contractId !== undefined) {
        localVarQueryParameter["contractId"] = contractId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取合同统计信息
     * @param {number} [timeType] 时间类型0月度 1季度 2年度
     * @param {number} [status] 项目状态1未完成 2已完成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractSummaryUsingGET(timeType?: number, status?: number, options: any = {}): FetchArgs {
      const localVarPath = `/contract/getContractSummary`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (timeType !== undefined) {
        localVarQueryParameter["timeType"] = timeType;
      }

      if (status !== undefined) {
        localVarQueryParameter["status"] = status;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取合同基本信息
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractUsingGET(id: number, options: any = {}): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError("id", "Required parameter id was null or undefined when calling getContractUsingGET.");
      }
      const localVarPath = `/contract/getContract`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取合同列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {number} [status] 状态 0未完成 1已完成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContractUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      status?: number,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/contract/listContract`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageCurrent !== undefined) {
        localVarQueryParameter["pageCurrent"] = pageCurrent;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["orderBy"] = orderBy;
      }

      if (descOrAsc !== undefined) {
        localVarQueryParameter["descOrAsc"] = descOrAsc;
      }

      if (pageBegin !== undefined) {
        localVarQueryParameter["pageBegin"] = pageBegin;
      }

      if (contractNo !== undefined) {
        localVarQueryParameter["contractNo"] = contractNo;
      }

      if (status !== undefined) {
        localVarQueryParameter["status"] = status;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 更新合同基本信息
     * @param {UpdateContractReq} updateContractReq updateContractReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractUsingPOST(updateContractReq: UpdateContractReq, options: any = {}): FetchArgs {
      // verify required parameter 'updateContractReq' is not null or undefined
      if (updateContractReq === null || updateContractReq === undefined) {
        throw new RequiredError(
          "updateContractReq",
          "Required parameter updateContractReq was null or undefined when calling updateContractUsingPOST."
        );
      }
      const localVarPath = `/contract/updateContract`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"UpdateContractReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(updateContractReq || {}) : updateContractReq || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * ContractControllerApi - functional programming interface
 * @export
 */
export const ContractControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加合同
     * @param {AddContractReq} addContractReq addContractReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractUsingPOST(addContractReq: AddContractReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractControllerApiFetchParamCreator(configuration).addContractUsingPOST(addContractReq, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 删除合同
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserUsingPOST(contractId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractControllerApiFetchParamCreator(configuration).deleteUserUsingPOST(contractId, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 导出合同列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {number} [status] 状态 0未完成 1已完成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportContractUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      status?: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = ContractControllerApiFetchParamCreator(configuration).exportContractUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        contractNo,
        status,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取合同的发票信息
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractInvoiceUsingGET(
      contractId: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultListGetContractInvoiceResp> {
      const localVarFetchArgs = ContractControllerApiFetchParamCreator(configuration).getContractInvoiceUsingGET(contractId, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取合同的期间信息
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractPeriodUsingGET(
      contractId: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultListGetContractPeriodResp> {
      const localVarFetchArgs = ContractControllerApiFetchParamCreator(configuration).getContractPeriodUsingGET(contractId, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取合同的收款信息
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractReceivablesUsingGET(
      contractId: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultListGetContractReceivablesResp> {
      const localVarFetchArgs = ContractControllerApiFetchParamCreator(configuration).getContractReceivablesUsingGET(contractId, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取合同统计信息
     * @param {number} [timeType] 时间类型0月度 1季度 2年度
     * @param {number} [status] 项目状态1未完成 2已完成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractSummaryUsingGET(
      timeType?: number,
      status?: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultListGetContractTimeSummaryResp> {
      const localVarFetchArgs = ContractControllerApiFetchParamCreator(configuration).getContractSummaryUsingGET(timeType, status, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取合同基本信息
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetContractResp> {
      const localVarFetchArgs = ContractControllerApiFetchParamCreator(configuration).getContractUsingGET(id, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取合同列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {number} [status] 状态 0未完成 1已完成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContractUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      status?: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetContractResp> {
      const localVarFetchArgs = ContractControllerApiFetchParamCreator(configuration).listContractUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        contractNo,
        status,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 更新合同基本信息
     * @param {UpdateContractReq} updateContractReq updateContractReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractUsingPOST(updateContractReq: UpdateContractReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractControllerApiFetchParamCreator(configuration).updateContractUsingPOST(updateContractReq, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * ContractControllerApi - factory interface
 * @export
 */
export const ContractControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 添加合同
     * @param {AddContractReq} addContractReq addContractReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractUsingPOST(addContractReq: AddContractReq, options?: any) {
      return ContractControllerApiFp(configuration).addContractUsingPOST(addContractReq, options)(fetch, basePath);
    },
    /**
     *
     * @summary 删除合同
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserUsingPOST(contractId: number, options?: any) {
      return ContractControllerApiFp(configuration).deleteUserUsingPOST(contractId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 导出合同列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {number} [status] 状态 0未完成 1已完成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportContractUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      status?: number,
      options?: any
    ) {
      return ContractControllerApiFp(configuration).exportContractUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        contractNo,
        status,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary 获取合同的发票信息
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractInvoiceUsingGET(contractId: number, options?: any) {
      return ContractControllerApiFp(configuration).getContractInvoiceUsingGET(contractId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取合同的期间信息
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractPeriodUsingGET(contractId: number, options?: any) {
      return ContractControllerApiFp(configuration).getContractPeriodUsingGET(contractId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取合同的收款信息
     * @param {number} contractId 合同id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractReceivablesUsingGET(contractId: number, options?: any) {
      return ContractControllerApiFp(configuration).getContractReceivablesUsingGET(contractId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取合同统计信息
     * @param {number} [timeType] 时间类型0月度 1季度 2年度
     * @param {number} [status] 项目状态1未完成 2已完成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractSummaryUsingGET(timeType?: number, status?: number, options?: any) {
      return ContractControllerApiFp(configuration).getContractSummaryUsingGET(timeType, status, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取合同基本信息
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractUsingGET(id: number, options?: any) {
      return ContractControllerApiFp(configuration).getContractUsingGET(id, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取合同列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {number} [status] 状态 0未完成 1已完成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContractUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      status?: number,
      options?: any
    ) {
      return ContractControllerApiFp(configuration).listContractUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        contractNo,
        status,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary 更新合同基本信息
     * @param {UpdateContractReq} updateContractReq updateContractReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractUsingPOST(updateContractReq: UpdateContractReq, options?: any) {
      return ContractControllerApiFp(configuration).updateContractUsingPOST(updateContractReq, options)(fetch, basePath);
    }
  };
};

/**
 * ContractControllerApi - object-oriented interface
 * @export
 * @class ContractControllerApi
 * @extends {BaseAPI}
 */
export class ContractControllerApi extends BaseAPI {
  /**
   *
   * @summary 添加合同
   * @param {AddContractReq} addContractReq addContractReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractControllerApi
   */
  public addContractUsingPOST(addContractReq: AddContractReq, options?: any) {
    return ContractControllerApiFp(this.configuration).addContractUsingPOST(addContractReq, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 删除合同
   * @param {number} contractId 合同id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractControllerApi
   */
  public deleteUserUsingPOST(contractId: number, options?: any) {
    return ContractControllerApiFp(this.configuration).deleteUserUsingPOST(contractId, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 导出合同列表
   * @param {number} [pageCurrent] 当前页
   * @param {number} [pageSize] 每页数量
   * @param {string} [orderBy] 排序字段
   * @param {string} [descOrAsc] 升序或降序
   * @param {number} [pageBegin]
   * @param {string} [contractNo] 合同编号
   * @param {number} [status] 状态 0未完成 1已完成
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractControllerApi
   */
  public exportContractUsingGET(
    pageCurrent?: number,
    pageSize?: number,
    orderBy?: string,
    descOrAsc?: string,
    pageBegin?: number,
    contractNo?: string,
    status?: number,
    options?: any
  ) {
    return ContractControllerApiFp(this.configuration).exportContractUsingGET(
      pageCurrent,
      pageSize,
      orderBy,
      descOrAsc,
      pageBegin,
      contractNo,
      status,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取合同的发票信息
   * @param {number} contractId 合同id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractControllerApi
   */
  public getContractInvoiceUsingGET(contractId: number, options?: any) {
    return ContractControllerApiFp(this.configuration).getContractInvoiceUsingGET(contractId, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取合同的期间信息
   * @param {number} contractId 合同id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractControllerApi
   */
  public getContractPeriodUsingGET(contractId: number, options?: any) {
    return ContractControllerApiFp(this.configuration).getContractPeriodUsingGET(contractId, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取合同的收款信息
   * @param {number} contractId 合同id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractControllerApi
   */
  public getContractReceivablesUsingGET(contractId: number, options?: any) {
    return ContractControllerApiFp(this.configuration).getContractReceivablesUsingGET(contractId, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取合同统计信息
   * @param {number} [timeType] 时间类型0月度 1季度 2年度
   * @param {number} [status] 项目状态1未完成 2已完成
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractControllerApi
   */
  public getContractSummaryUsingGET(timeType?: number, status?: number, options?: any) {
    return ContractControllerApiFp(this.configuration).getContractSummaryUsingGET(timeType, status, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取合同基本信息
   * @param {number} id 主键id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractControllerApi
   */
  public getContractUsingGET(id: number, options?: any) {
    return ContractControllerApiFp(this.configuration).getContractUsingGET(id, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取合同列表
   * @param {number} [pageCurrent] 当前页
   * @param {number} [pageSize] 每页数量
   * @param {string} [orderBy] 排序字段
   * @param {string} [descOrAsc] 升序或降序
   * @param {number} [pageBegin]
   * @param {string} [contractNo] 合同编号
   * @param {number} [status] 状态 0未完成 1已完成
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractControllerApi
   */
  public listContractUsingGET(
    pageCurrent?: number,
    pageSize?: number,
    orderBy?: string,
    descOrAsc?: string,
    pageBegin?: number,
    contractNo?: string,
    status?: number,
    options?: any
  ) {
    return ContractControllerApiFp(this.configuration).listContractUsingGET(
      pageCurrent,
      pageSize,
      orderBy,
      descOrAsc,
      pageBegin,
      contractNo,
      status,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 更新合同基本信息
   * @param {UpdateContractReq} updateContractReq updateContractReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractControllerApi
   */
  public updateContractUsingPOST(updateContractReq: UpdateContractReq, options?: any) {
    return ContractControllerApiFp(this.configuration).updateContractUsingPOST(updateContractReq, options)(this.fetch, this.basePath);
  }
}

/**
 * ContractInvoiceControllerApi - fetch parameter creator
 * @export
 */
export const ContractInvoiceControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加发票
     * @param {AddContractInvoiceReq} addContractInvoiceReq addContractInvoiceReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractInvoiceUsingPOST(addContractInvoiceReq: AddContractInvoiceReq, options: any = {}): FetchArgs {
      // verify required parameter 'addContractInvoiceReq' is not null or undefined
      if (addContractInvoiceReq === null || addContractInvoiceReq === undefined) {
        throw new RequiredError(
          "addContractInvoiceReq",
          "Required parameter addContractInvoiceReq was null or undefined when calling addContractInvoiceUsingPOST."
        );
      }
      const localVarPath = `/contractInvoice/addContractInvoice`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"AddContractInvoiceReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(addContractInvoiceReq || {}) : addContractInvoiceReq || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 删除发票
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractInvoiceUsingPOST(id: number, options: any = {}): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteContractInvoiceUsingPOST.");
      }
      const localVarPath = `/contractInvoice/deleteContract`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取发票
     * @param {number} [id] id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractInvoiceUsingGET1(id?: number, options: any = {}): FetchArgs {
      const localVarPath = `/contractInvoice/getContractInvoice`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取合同发票列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {string} [invoiceNo] 发票编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pageContractInvoiceUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      invoiceNo?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/contractInvoice/pageContractInvoice`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageCurrent !== undefined) {
        localVarQueryParameter["pageCurrent"] = pageCurrent;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["orderBy"] = orderBy;
      }

      if (descOrAsc !== undefined) {
        localVarQueryParameter["descOrAsc"] = descOrAsc;
      }

      if (pageBegin !== undefined) {
        localVarQueryParameter["pageBegin"] = pageBegin;
      }

      if (contractNo !== undefined) {
        localVarQueryParameter["contractNo"] = contractNo;
      }

      if (invoiceNo !== undefined) {
        localVarQueryParameter["invoiceNo"] = invoiceNo;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 更新发票
     * @param {UpdateContractInvoiceReq} updateContractInvoiceReq updateContractInvoiceReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractInvoiceUsingPOST(updateContractInvoiceReq: UpdateContractInvoiceReq, options: any = {}): FetchArgs {
      // verify required parameter 'updateContractInvoiceReq' is not null or undefined
      if (updateContractInvoiceReq === null || updateContractInvoiceReq === undefined) {
        throw new RequiredError(
          "updateContractInvoiceReq",
          "Required parameter updateContractInvoiceReq was null or undefined when calling updateContractInvoiceUsingPOST."
        );
      }
      const localVarPath = `/contractInvoice/updateContractInvoice`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"UpdateContractInvoiceReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(updateContractInvoiceReq || {}) : updateContractInvoiceReq || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * ContractInvoiceControllerApi - functional programming interface
 * @export
 */
export const ContractInvoiceControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加发票
     * @param {AddContractInvoiceReq} addContractInvoiceReq addContractInvoiceReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractInvoiceUsingPOST(
      addContractInvoiceReq: AddContractInvoiceReq,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractInvoiceControllerApiFetchParamCreator(configuration).addContractInvoiceUsingPOST(
        addContractInvoiceReq,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 删除发票
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractInvoiceUsingPOST(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractInvoiceControllerApiFetchParamCreator(configuration).deleteContractInvoiceUsingPOST(id, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取发票
     * @param {number} [id] id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractInvoiceUsingGET1(
      id?: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetContractInvoiceResp> {
      const localVarFetchArgs = ContractInvoiceControllerApiFetchParamCreator(configuration).getContractInvoiceUsingGET1(id, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取合同发票列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {string} [invoiceNo] 发票编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pageContractInvoiceUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      invoiceNo?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetContractInvoiceResp> {
      const localVarFetchArgs = ContractInvoiceControllerApiFetchParamCreator(configuration).pageContractInvoiceUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        contractNo,
        invoiceNo,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 更新发票
     * @param {UpdateContractInvoiceReq} updateContractInvoiceReq updateContractInvoiceReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractInvoiceUsingPOST(
      updateContractInvoiceReq: UpdateContractInvoiceReq,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractInvoiceControllerApiFetchParamCreator(configuration).updateContractInvoiceUsingPOST(
        updateContractInvoiceReq,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * ContractInvoiceControllerApi - factory interface
 * @export
 */
export const ContractInvoiceControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 添加发票
     * @param {AddContractInvoiceReq} addContractInvoiceReq addContractInvoiceReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractInvoiceUsingPOST(addContractInvoiceReq: AddContractInvoiceReq, options?: any) {
      return ContractInvoiceControllerApiFp(configuration).addContractInvoiceUsingPOST(addContractInvoiceReq, options)(fetch, basePath);
    },
    /**
     *
     * @summary 删除发票
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractInvoiceUsingPOST(id: number, options?: any) {
      return ContractInvoiceControllerApiFp(configuration).deleteContractInvoiceUsingPOST(id, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取发票
     * @param {number} [id] id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractInvoiceUsingGET1(id?: number, options?: any) {
      return ContractInvoiceControllerApiFp(configuration).getContractInvoiceUsingGET1(id, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取合同发票列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {string} [invoiceNo] 发票编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pageContractInvoiceUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      invoiceNo?: string,
      options?: any
    ) {
      return ContractInvoiceControllerApiFp(configuration).pageContractInvoiceUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        contractNo,
        invoiceNo,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary 更新发票
     * @param {UpdateContractInvoiceReq} updateContractInvoiceReq updateContractInvoiceReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractInvoiceUsingPOST(updateContractInvoiceReq: UpdateContractInvoiceReq, options?: any) {
      return ContractInvoiceControllerApiFp(configuration).updateContractInvoiceUsingPOST(updateContractInvoiceReq, options)(
        fetch,
        basePath
      );
    }
  };
};

/**
 * ContractInvoiceControllerApi - object-oriented interface
 * @export
 * @class ContractInvoiceControllerApi
 * @extends {BaseAPI}
 */
export class ContractInvoiceControllerApi extends BaseAPI {
  /**
   *
   * @summary 添加发票
   * @param {AddContractInvoiceReq} addContractInvoiceReq addContractInvoiceReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractInvoiceControllerApi
   */
  public addContractInvoiceUsingPOST(addContractInvoiceReq: AddContractInvoiceReq, options?: any) {
    return ContractInvoiceControllerApiFp(this.configuration).addContractInvoiceUsingPOST(addContractInvoiceReq, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary 删除发票
   * @param {number} id 主键id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractInvoiceControllerApi
   */
  public deleteContractInvoiceUsingPOST(id: number, options?: any) {
    return ContractInvoiceControllerApiFp(this.configuration).deleteContractInvoiceUsingPOST(id, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取发票
   * @param {number} [id] id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractInvoiceControllerApi
   */
  public getContractInvoiceUsingGET1(id?: number, options?: any) {
    return ContractInvoiceControllerApiFp(this.configuration).getContractInvoiceUsingGET1(id, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取合同发票列表
   * @param {number} [pageCurrent] 当前页
   * @param {number} [pageSize] 每页数量
   * @param {string} [orderBy] 排序字段
   * @param {string} [descOrAsc] 升序或降序
   * @param {number} [pageBegin]
   * @param {string} [contractNo] 合同编号
   * @param {string} [invoiceNo] 发票编号
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractInvoiceControllerApi
   */
  public pageContractInvoiceUsingGET(
    pageCurrent?: number,
    pageSize?: number,
    orderBy?: string,
    descOrAsc?: string,
    pageBegin?: number,
    contractNo?: string,
    invoiceNo?: string,
    options?: any
  ) {
    return ContractInvoiceControllerApiFp(this.configuration).pageContractInvoiceUsingGET(
      pageCurrent,
      pageSize,
      orderBy,
      descOrAsc,
      pageBegin,
      contractNo,
      invoiceNo,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 更新发票
   * @param {UpdateContractInvoiceReq} updateContractInvoiceReq updateContractInvoiceReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractInvoiceControllerApi
   */
  public updateContractInvoiceUsingPOST(updateContractInvoiceReq: UpdateContractInvoiceReq, options?: any) {
    return ContractInvoiceControllerApiFp(this.configuration).updateContractInvoiceUsingPOST(updateContractInvoiceReq, options)(
      this.fetch,
      this.basePath
    );
  }
}

/**
 * ContractPeriodControllerApi - fetch parameter creator
 * @export
 */
export const ContractPeriodControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加期间
     * @param {AddContractPeriodReq} addContractPeriodReq addContractPeriodReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractPeriodUsingPOST(addContractPeriodReq: AddContractPeriodReq, options: any = {}): FetchArgs {
      // verify required parameter 'addContractPeriodReq' is not null or undefined
      if (addContractPeriodReq === null || addContractPeriodReq === undefined) {
        throw new RequiredError(
          "addContractPeriodReq",
          "Required parameter addContractPeriodReq was null or undefined when calling addContractPeriodUsingPOST."
        );
      }
      const localVarPath = `/contractPeriod/addContractPeriod`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"AddContractPeriodReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(addContractPeriodReq || {}) : addContractPeriodReq || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 删除期间
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractPeriodUsingPOST(id: number, options: any = {}): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteContractPeriodUsingPOST.");
      }
      const localVarPath = `/contractPeriod/deleteContract`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取期间
     * @param {number} [id] id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractPeriodUsingGET1(id?: number, options: any = {}): FetchArgs {
      const localVarPath = `/contractPeriod/getContractPeriod`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 更新期间
     * @param {UpdateContractPeriodReq} updateContractPeriodReq updateContractPeriodReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractPeriodUsingPOST(updateContractPeriodReq: UpdateContractPeriodReq, options: any = {}): FetchArgs {
      // verify required parameter 'updateContractPeriodReq' is not null or undefined
      if (updateContractPeriodReq === null || updateContractPeriodReq === undefined) {
        throw new RequiredError(
          "updateContractPeriodReq",
          "Required parameter updateContractPeriodReq was null or undefined when calling updateContractPeriodUsingPOST."
        );
      }
      const localVarPath = `/contractPeriod/updateContractPeriod`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"UpdateContractPeriodReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(updateContractPeriodReq || {}) : updateContractPeriodReq || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * ContractPeriodControllerApi - functional programming interface
 * @export
 */
export const ContractPeriodControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加期间
     * @param {AddContractPeriodReq} addContractPeriodReq addContractPeriodReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractPeriodUsingPOST(
      addContractPeriodReq: AddContractPeriodReq,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractPeriodControllerApiFetchParamCreator(configuration).addContractPeriodUsingPOST(
        addContractPeriodReq,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 删除期间
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractPeriodUsingPOST(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractPeriodControllerApiFetchParamCreator(configuration).deleteContractPeriodUsingPOST(id, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取期间
     * @param {number} [id] id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractPeriodUsingGET1(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetContractPeriodResp> {
      const localVarFetchArgs = ContractPeriodControllerApiFetchParamCreator(configuration).getContractPeriodUsingGET1(id, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 更新期间
     * @param {UpdateContractPeriodReq} updateContractPeriodReq updateContractPeriodReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractPeriodUsingPOST(
      updateContractPeriodReq: UpdateContractPeriodReq,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractPeriodControllerApiFetchParamCreator(configuration).updateContractPeriodUsingPOST(
        updateContractPeriodReq,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * ContractPeriodControllerApi - factory interface
 * @export
 */
export const ContractPeriodControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 添加期间
     * @param {AddContractPeriodReq} addContractPeriodReq addContractPeriodReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractPeriodUsingPOST(addContractPeriodReq: AddContractPeriodReq, options?: any) {
      return ContractPeriodControllerApiFp(configuration).addContractPeriodUsingPOST(addContractPeriodReq, options)(fetch, basePath);
    },
    /**
     *
     * @summary 删除期间
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractPeriodUsingPOST(id: number, options?: any) {
      return ContractPeriodControllerApiFp(configuration).deleteContractPeriodUsingPOST(id, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取期间
     * @param {number} [id] id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractPeriodUsingGET1(id?: number, options?: any) {
      return ContractPeriodControllerApiFp(configuration).getContractPeriodUsingGET1(id, options)(fetch, basePath);
    },
    /**
     *
     * @summary 更新期间
     * @param {UpdateContractPeriodReq} updateContractPeriodReq updateContractPeriodReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractPeriodUsingPOST(updateContractPeriodReq: UpdateContractPeriodReq, options?: any) {
      return ContractPeriodControllerApiFp(configuration).updateContractPeriodUsingPOST(updateContractPeriodReq, options)(fetch, basePath);
    }
  };
};

/**
 * ContractPeriodControllerApi - object-oriented interface
 * @export
 * @class ContractPeriodControllerApi
 * @extends {BaseAPI}
 */
export class ContractPeriodControllerApi extends BaseAPI {
  /**
   *
   * @summary 添加期间
   * @param {AddContractPeriodReq} addContractPeriodReq addContractPeriodReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractPeriodControllerApi
   */
  public addContractPeriodUsingPOST(addContractPeriodReq: AddContractPeriodReq, options?: any) {
    return ContractPeriodControllerApiFp(this.configuration).addContractPeriodUsingPOST(addContractPeriodReq, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary 删除期间
   * @param {number} id 主键id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractPeriodControllerApi
   */
  public deleteContractPeriodUsingPOST(id: number, options?: any) {
    return ContractPeriodControllerApiFp(this.configuration).deleteContractPeriodUsingPOST(id, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取期间
   * @param {number} [id] id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractPeriodControllerApi
   */
  public getContractPeriodUsingGET1(id?: number, options?: any) {
    return ContractPeriodControllerApiFp(this.configuration).getContractPeriodUsingGET1(id, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 更新期间
   * @param {UpdateContractPeriodReq} updateContractPeriodReq updateContractPeriodReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractPeriodControllerApi
   */
  public updateContractPeriodUsingPOST(updateContractPeriodReq: UpdateContractPeriodReq, options?: any) {
    return ContractPeriodControllerApiFp(this.configuration).updateContractPeriodUsingPOST(updateContractPeriodReq, options)(
      this.fetch,
      this.basePath
    );
  }
}

/**
 * ContractReceivablesControllerApi - fetch parameter creator
 * @export
 */
export const ContractReceivablesControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加合同收款
     * @param {AddContractReceivablesReq} addContractReceivablesReq addContractReceivablesReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractReceivablesUsingPOST(addContractReceivablesReq: AddContractReceivablesReq, options: any = {}): FetchArgs {
      // verify required parameter 'addContractReceivablesReq' is not null or undefined
      if (addContractReceivablesReq === null || addContractReceivablesReq === undefined) {
        throw new RequiredError(
          "addContractReceivablesReq",
          "Required parameter addContractReceivablesReq was null or undefined when calling addContractReceivablesUsingPOST."
        );
      }
      const localVarPath = `/contractReceivables/addContractReceivables`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"AddContractReceivablesReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(addContractReceivablesReq || {}) : addContractReceivablesReq || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 删除收款
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractReceivablesUsingPOST(id: number, options: any = {}): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteContractReceivablesUsingPOST.");
      }
      const localVarPath = `/contractReceivables/deleteContract`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取收款
     * @param {number} [id] id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractReceivablesUsingGET1(id?: number, options: any = {}): FetchArgs {
      const localVarPath = `/contractReceivables/getContractReceivables`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取合同收款列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pageContractReceivablesUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/contractReceivables/pageContractReceivables`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageCurrent !== undefined) {
        localVarQueryParameter["pageCurrent"] = pageCurrent;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["orderBy"] = orderBy;
      }

      if (descOrAsc !== undefined) {
        localVarQueryParameter["descOrAsc"] = descOrAsc;
      }

      if (pageBegin !== undefined) {
        localVarQueryParameter["pageBegin"] = pageBegin;
      }

      if (contractNo !== undefined) {
        localVarQueryParameter["contractNo"] = contractNo;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 更新收款
     * @param {UpdateContractReceivablesReq} updateContractReceivablesReq updateContractReceivablesReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractReceivablesUsingPOST(updateContractReceivablesReq: UpdateContractReceivablesReq, options: any = {}): FetchArgs {
      // verify required parameter 'updateContractReceivablesReq' is not null or undefined
      if (updateContractReceivablesReq === null || updateContractReceivablesReq === undefined) {
        throw new RequiredError(
          "updateContractReceivablesReq",
          "Required parameter updateContractReceivablesReq was null or undefined when calling updateContractReceivablesUsingPOST."
        );
      }
      const localVarPath = `/contractReceivables/updateContractReceivables`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"UpdateContractReceivablesReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(updateContractReceivablesReq || {})
        : updateContractReceivablesReq || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * ContractReceivablesControllerApi - functional programming interface
 * @export
 */
export const ContractReceivablesControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加合同收款
     * @param {AddContractReceivablesReq} addContractReceivablesReq addContractReceivablesReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractReceivablesUsingPOST(
      addContractReceivablesReq: AddContractReceivablesReq,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractReceivablesControllerApiFetchParamCreator(configuration).addContractReceivablesUsingPOST(
        addContractReceivablesReq,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 删除收款
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractReceivablesUsingPOST(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractReceivablesControllerApiFetchParamCreator(configuration).deleteContractReceivablesUsingPOST(
        id,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取收款
     * @param {number} [id] id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractReceivablesUsingGET1(
      id?: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetContractReceivablesResp> {
      const localVarFetchArgs = ContractReceivablesControllerApiFetchParamCreator(configuration).getContractReceivablesUsingGET1(
        id,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取合同收款列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pageContractReceivablesUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetContractReceivablesResp> {
      const localVarFetchArgs = ContractReceivablesControllerApiFetchParamCreator(configuration).pageContractReceivablesUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        contractNo,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 更新收款
     * @param {UpdateContractReceivablesReq} updateContractReceivablesReq updateContractReceivablesReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractReceivablesUsingPOST(
      updateContractReceivablesReq: UpdateContractReceivablesReq,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = ContractReceivablesControllerApiFetchParamCreator(configuration).updateContractReceivablesUsingPOST(
        updateContractReceivablesReq,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * ContractReceivablesControllerApi - factory interface
 * @export
 */
export const ContractReceivablesControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 添加合同收款
     * @param {AddContractReceivablesReq} addContractReceivablesReq addContractReceivablesReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContractReceivablesUsingPOST(addContractReceivablesReq: AddContractReceivablesReq, options?: any) {
      return ContractReceivablesControllerApiFp(configuration).addContractReceivablesUsingPOST(addContractReceivablesReq, options)(
        fetch,
        basePath
      );
    },
    /**
     *
     * @summary 删除收款
     * @param {number} id 主键id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContractReceivablesUsingPOST(id: number, options?: any) {
      return ContractReceivablesControllerApiFp(configuration).deleteContractReceivablesUsingPOST(id, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取收款
     * @param {number} [id] id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractReceivablesUsingGET1(id?: number, options?: any) {
      return ContractReceivablesControllerApiFp(configuration).getContractReceivablesUsingGET1(id, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取合同收款列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [contractNo] 合同编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pageContractReceivablesUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      contractNo?: string,
      options?: any
    ) {
      return ContractReceivablesControllerApiFp(configuration).pageContractReceivablesUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        contractNo,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary 更新收款
     * @param {UpdateContractReceivablesReq} updateContractReceivablesReq updateContractReceivablesReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContractReceivablesUsingPOST(updateContractReceivablesReq: UpdateContractReceivablesReq, options?: any) {
      return ContractReceivablesControllerApiFp(configuration).updateContractReceivablesUsingPOST(updateContractReceivablesReq, options)(
        fetch,
        basePath
      );
    }
  };
};

/**
 * ContractReceivablesControllerApi - object-oriented interface
 * @export
 * @class ContractReceivablesControllerApi
 * @extends {BaseAPI}
 */
export class ContractReceivablesControllerApi extends BaseAPI {
  /**
   *
   * @summary 添加合同收款
   * @param {AddContractReceivablesReq} addContractReceivablesReq addContractReceivablesReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractReceivablesControllerApi
   */
  public addContractReceivablesUsingPOST(addContractReceivablesReq: AddContractReceivablesReq, options?: any) {
    return ContractReceivablesControllerApiFp(this.configuration).addContractReceivablesUsingPOST(addContractReceivablesReq, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary 删除收款
   * @param {number} id 主键id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractReceivablesControllerApi
   */
  public deleteContractReceivablesUsingPOST(id: number, options?: any) {
    return ContractReceivablesControllerApiFp(this.configuration).deleteContractReceivablesUsingPOST(id, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary 获取收款
   * @param {number} [id] id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractReceivablesControllerApi
   */
  public getContractReceivablesUsingGET1(id?: number, options?: any) {
    return ContractReceivablesControllerApiFp(this.configuration).getContractReceivablesUsingGET1(id, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取合同收款列表
   * @param {number} [pageCurrent] 当前页
   * @param {number} [pageSize] 每页数量
   * @param {string} [orderBy] 排序字段
   * @param {string} [descOrAsc] 升序或降序
   * @param {number} [pageBegin]
   * @param {string} [contractNo] 合同编号
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractReceivablesControllerApi
   */
  public pageContractReceivablesUsingGET(
    pageCurrent?: number,
    pageSize?: number,
    orderBy?: string,
    descOrAsc?: string,
    pageBegin?: number,
    contractNo?: string,
    options?: any
  ) {
    return ContractReceivablesControllerApiFp(this.configuration).pageContractReceivablesUsingGET(
      pageCurrent,
      pageSize,
      orderBy,
      descOrAsc,
      pageBegin,
      contractNo,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 更新收款
   * @param {UpdateContractReceivablesReq} updateContractReceivablesReq updateContractReceivablesReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContractReceivablesControllerApi
   */
  public updateContractReceivablesUsingPOST(updateContractReceivablesReq: UpdateContractReceivablesReq, options?: any) {
    return ContractReceivablesControllerApiFp(this.configuration).updateContractReceivablesUsingPOST(updateContractReceivablesReq, options)(
      this.fetch,
      this.basePath
    );
  }
}

/**
 * CustomerControllerApi - fetch parameter creator
 * @export
 */
export const CustomerControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增客户
     * @param {AddCustomerReq} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerUsingPOST(req: AddCustomerReq, options: any = {}): FetchArgs {
      // verify required parameter 'req' is not null or undefined
      if (req === null || req === undefined) {
        throw new RequiredError("req", "Required parameter req was null or undefined when calling addCustomerUsingPOST.");
      }
      const localVarPath = `/customer/addCustomer`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"AddCustomerReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(req || {}) : req || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 删除客户
     * @param {number} customerId 客户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerUsingPOST(customerId: number, options: any = {}): FetchArgs {
      // verify required parameter 'customerId' is not null or undefined
      if (customerId === null || customerId === undefined) {
        throw new RequiredError("customerId", "Required parameter customerId was null or undefined when calling deleteCustomerUsingPOST.");
      }
      const localVarPath = `/customer/deleteCustomer`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (customerId !== undefined) {
        localVarQueryParameter["customerId"] = customerId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 根据合同编号获取客户
     * @param {string} contractNo 合同编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerByContractNoUsingGET(contractNo: string, options: any = {}): FetchArgs {
      // verify required parameter 'contractNo' is not null or undefined
      if (contractNo === null || contractNo === undefined) {
        throw new RequiredError(
          "contractNo",
          "Required parameter contractNo was null or undefined when calling getCustomerByContractNoUsingGET."
        );
      }
      const localVarPath = `/customer/getCustomerByContractNo`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (contractNo !== undefined) {
        localVarQueryParameter["contractNo"] = contractNo;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取客户的跟进信息
     * @param {number} customerId 客户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerFollowUsingGET(customerId: number, options: any = {}): FetchArgs {
      // verify required parameter 'customerId' is not null or undefined
      if (customerId === null || customerId === undefined) {
        throw new RequiredError(
          "customerId",
          "Required parameter customerId was null or undefined when calling getCustomerFollowUsingGET."
        );
      }
      const localVarPath = `/customer/getCustomerFollow`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (customerId !== undefined) {
        localVarQueryParameter["customerId"] = customerId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取客户
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerUsingGET(id: number, options: any = {}): FetchArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError("id", "Required parameter id was null or undefined when calling getCustomerUsingGET.");
      }
      const localVarPath = `/customer/getCustomer`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取客户列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [customerName] 供应商名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      customerName?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/customer/listCustomer`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageCurrent !== undefined) {
        localVarQueryParameter["pageCurrent"] = pageCurrent;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["orderBy"] = orderBy;
      }

      if (descOrAsc !== undefined) {
        localVarQueryParameter["descOrAsc"] = descOrAsc;
      }

      if (pageBegin !== undefined) {
        localVarQueryParameter["pageBegin"] = pageBegin;
      }

      if (customerName !== undefined) {
        localVarQueryParameter["customerName"] = customerName;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 更新客户
     * @param {UpdateCustomerReq} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerUsingPOST(req: UpdateCustomerReq, options: any = {}): FetchArgs {
      // verify required parameter 'req' is not null or undefined
      if (req === null || req === undefined) {
        throw new RequiredError("req", "Required parameter req was null or undefined when calling updateCustomerUsingPOST.");
      }
      const localVarPath = `/customer/updateCustomer`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"UpdateCustomerReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(req || {}) : req || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * CustomerControllerApi - functional programming interface
 * @export
 */
export const CustomerControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增客户
     * @param {AddCustomerReq} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerUsingPOST(req: AddCustomerReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = CustomerControllerApiFetchParamCreator(configuration).addCustomerUsingPOST(req, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 删除客户
     * @param {number} customerId 客户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerUsingPOST(
      customerId: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultListGetCustomerFollowResp> {
      const localVarFetchArgs = CustomerControllerApiFetchParamCreator(configuration).deleteCustomerUsingPOST(customerId, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 根据合同编号获取客户
     * @param {string} contractNo 合同编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerByContractNoUsingGET(
      contractNo: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetCustomerResp> {
      const localVarFetchArgs = CustomerControllerApiFetchParamCreator(configuration).getCustomerByContractNoUsingGET(contractNo, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取客户的跟进信息
     * @param {number} customerId 客户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerFollowUsingGET(
      customerId: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultListGetCustomerFollowResp> {
      const localVarFetchArgs = CustomerControllerApiFetchParamCreator(configuration).getCustomerFollowUsingGET(customerId, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取客户
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerUsingGET(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetCustomerResp> {
      const localVarFetchArgs = CustomerControllerApiFetchParamCreator(configuration).getCustomerUsingGET(id, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取客户列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [customerName] 供应商名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      customerName?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetCustomerResp> {
      const localVarFetchArgs = CustomerControllerApiFetchParamCreator(configuration).listCustomerUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        customerName,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 更新客户
     * @param {UpdateCustomerReq} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerUsingPOST(req: UpdateCustomerReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = CustomerControllerApiFetchParamCreator(configuration).updateCustomerUsingPOST(req, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * CustomerControllerApi - factory interface
 * @export
 */
export const CustomerControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 新增客户
     * @param {AddCustomerReq} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerUsingPOST(req: AddCustomerReq, options?: any) {
      return CustomerControllerApiFp(configuration).addCustomerUsingPOST(req, options)(fetch, basePath);
    },
    /**
     *
     * @summary 删除客户
     * @param {number} customerId 客户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomerUsingPOST(customerId: number, options?: any) {
      return CustomerControllerApiFp(configuration).deleteCustomerUsingPOST(customerId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 根据合同编号获取客户
     * @param {string} contractNo 合同编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerByContractNoUsingGET(contractNo: string, options?: any) {
      return CustomerControllerApiFp(configuration).getCustomerByContractNoUsingGET(contractNo, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取客户的跟进信息
     * @param {number} customerId 客户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerFollowUsingGET(customerId: number, options?: any) {
      return CustomerControllerApiFp(configuration).getCustomerFollowUsingGET(customerId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取客户
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerUsingGET(id: number, options?: any) {
      return CustomerControllerApiFp(configuration).getCustomerUsingGET(id, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取客户列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [customerName] 供应商名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      customerName?: string,
      options?: any
    ) {
      return CustomerControllerApiFp(configuration).listCustomerUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        customerName,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary 更新客户
     * @param {UpdateCustomerReq} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerUsingPOST(req: UpdateCustomerReq, options?: any) {
      return CustomerControllerApiFp(configuration).updateCustomerUsingPOST(req, options)(fetch, basePath);
    }
  };
};

/**
 * CustomerControllerApi - object-oriented interface
 * @export
 * @class CustomerControllerApi
 * @extends {BaseAPI}
 */
export class CustomerControllerApi extends BaseAPI {
  /**
   *
   * @summary 新增客户
   * @param {AddCustomerReq} req req
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public addCustomerUsingPOST(req: AddCustomerReq, options?: any) {
    return CustomerControllerApiFp(this.configuration).addCustomerUsingPOST(req, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 删除客户
   * @param {number} customerId 客户id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public deleteCustomerUsingPOST(customerId: number, options?: any) {
    return CustomerControllerApiFp(this.configuration).deleteCustomerUsingPOST(customerId, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 根据合同编号获取客户
   * @param {string} contractNo 合同编号
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public getCustomerByContractNoUsingGET(contractNo: string, options?: any) {
    return CustomerControllerApiFp(this.configuration).getCustomerByContractNoUsingGET(contractNo, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取客户的跟进信息
   * @param {number} customerId 客户id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public getCustomerFollowUsingGET(customerId: number, options?: any) {
    return CustomerControllerApiFp(this.configuration).getCustomerFollowUsingGET(customerId, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取客户
   * @param {number} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public getCustomerUsingGET(id: number, options?: any) {
    return CustomerControllerApiFp(this.configuration).getCustomerUsingGET(id, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取客户列表
   * @param {number} [pageCurrent] 当前页
   * @param {number} [pageSize] 每页数量
   * @param {string} [orderBy] 排序字段
   * @param {string} [descOrAsc] 升序或降序
   * @param {number} [pageBegin]
   * @param {string} [customerName] 供应商名称
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public listCustomerUsingGET(
    pageCurrent?: number,
    pageSize?: number,
    orderBy?: string,
    descOrAsc?: string,
    pageBegin?: number,
    customerName?: string,
    options?: any
  ) {
    return CustomerControllerApiFp(this.configuration).listCustomerUsingGET(
      pageCurrent,
      pageSize,
      orderBy,
      descOrAsc,
      pageBegin,
      customerName,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 更新客户
   * @param {UpdateCustomerReq} req req
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public updateCustomerUsingPOST(req: UpdateCustomerReq, options?: any) {
    return CustomerControllerApiFp(this.configuration).updateCustomerUsingPOST(req, options)(this.fetch, this.basePath);
  }
}

/**
 * CustomerFollowControllerApi - fetch parameter creator
 * @export
 */
export const CustomerFollowControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加客户跟进记录
     * @param {AddCustomerFollowReq} addCustomerFollowReq addCustomerFollowReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerFollowUsingPOST(addCustomerFollowReq: AddCustomerFollowReq, options: any = {}): FetchArgs {
      // verify required parameter 'addCustomerFollowReq' is not null or undefined
      if (addCustomerFollowReq === null || addCustomerFollowReq === undefined) {
        throw new RequiredError(
          "addCustomerFollowReq",
          "Required parameter addCustomerFollowReq was null or undefined when calling addCustomerFollowUsingPOST."
        );
      }
      const localVarPath = `/customerfollow/addCustomerFollow`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"AddCustomerFollowReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(addCustomerFollowReq || {}) : addCustomerFollowReq || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * CustomerFollowControllerApi - functional programming interface
 * @export
 */
export const CustomerFollowControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加客户跟进记录
     * @param {AddCustomerFollowReq} addCustomerFollowReq addCustomerFollowReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerFollowUsingPOST(
      addCustomerFollowReq: AddCustomerFollowReq,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = CustomerFollowControllerApiFetchParamCreator(configuration).addCustomerFollowUsingPOST(
        addCustomerFollowReq,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * CustomerFollowControllerApi - factory interface
 * @export
 */
export const CustomerFollowControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 添加客户跟进记录
     * @param {AddCustomerFollowReq} addCustomerFollowReq addCustomerFollowReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerFollowUsingPOST(addCustomerFollowReq: AddCustomerFollowReq, options?: any) {
      return CustomerFollowControllerApiFp(configuration).addCustomerFollowUsingPOST(addCustomerFollowReq, options)(fetch, basePath);
    }
  };
};

/**
 * CustomerFollowControllerApi - object-oriented interface
 * @export
 * @class CustomerFollowControllerApi
 * @extends {BaseAPI}
 */
export class CustomerFollowControllerApi extends BaseAPI {
  /**
   *
   * @summary 添加客户跟进记录
   * @param {AddCustomerFollowReq} addCustomerFollowReq addCustomerFollowReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerFollowControllerApi
   */
  public addCustomerFollowUsingPOST(addCustomerFollowReq: AddCustomerFollowReq, options?: any) {
    return CustomerFollowControllerApiFp(this.configuration).addCustomerFollowUsingPOST(addCustomerFollowReq, options)(
      this.fetch,
      this.basePath
    );
  }
}

/**
 * LoginControllerApi - fetch parameter creator
 * @export
 */
export const LoginControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 生成验证码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captchaUsingGET(options: any = {}): FetchArgs {
      const localVarPath = `/login/captcha`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 登录
     * @param {LoginReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUsingPOST(request: LoginReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling loginUsingPOST.");
      }
      const localVarPath = `/login/login`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization = <any>"LoginReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 注销
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUsingGET(options: any = {}): FetchArgs {
      const localVarPath = `/login/logout`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * LoginControllerApi - functional programming interface
 * @export
 */
export const LoginControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 生成验证码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captchaUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = LoginControllerApiFetchParamCreator(configuration).captchaUsingGET(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 登录
     * @param {LoginReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUsingPOST(request: LoginReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = LoginControllerApiFetchParamCreator(configuration).loginUsingPOST(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 注销
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = LoginControllerApiFetchParamCreator(configuration).logoutUsingGET(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * LoginControllerApi - factory interface
 * @export
 */
export const LoginControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 生成验证码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captchaUsingGET(options?: any) {
      return LoginControllerApiFp(configuration).captchaUsingGET(options)(fetch, basePath);
    },
    /**
     *
     * @summary 登录
     * @param {LoginReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUsingPOST(request: LoginReq, options?: any) {
      return LoginControllerApiFp(configuration).loginUsingPOST(request, options)(fetch, basePath);
    },
    /**
     *
     * @summary 注销
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUsingGET(options?: any) {
      return LoginControllerApiFp(configuration).logoutUsingGET(options)(fetch, basePath);
    }
  };
};

/**
 * LoginControllerApi - object-oriented interface
 * @export
 * @class LoginControllerApi
 * @extends {BaseAPI}
 */
export class LoginControllerApi extends BaseAPI {
  /**
   *
   * @summary 生成验证码
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoginControllerApi
   */
  public captchaUsingGET(options?: any) {
    return LoginControllerApiFp(this.configuration).captchaUsingGET(options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 登录
   * @param {LoginReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoginControllerApi
   */
  public loginUsingPOST(request: LoginReq, options?: any) {
    return LoginControllerApiFp(this.configuration).loginUsingPOST(request, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 注销
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoginControllerApi
   */
  public logoutUsingGET(options?: any) {
    return LoginControllerApiFp(this.configuration).logoutUsingGET(options)(this.fetch, this.basePath);
  }
}

/**
 * PermissionControllerApi - fetch parameter creator
 * @export
 */
export const PermissionControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取当前用户权限列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermissionListUsingGET(options: any = {}): FetchArgs {
      const localVarPath = `/permission/getUserPermissionList`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取权限树
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treePermsUsingGET(options: any = {}): FetchArgs {
      const localVarPath = `/permission/treePerms`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * PermissionControllerApi - functional programming interface
 * @export
 */
export const PermissionControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取当前用户权限列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermissionListUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultListListPermissionResp> {
      const localVarFetchArgs = PermissionControllerApiFetchParamCreator(configuration).getUserPermissionListUsingGET(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取权限树
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treePermsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultListZtreeResp> {
      const localVarFetchArgs = PermissionControllerApiFetchParamCreator(configuration).treePermsUsingGET(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * PermissionControllerApi - factory interface
 * @export
 */
export const PermissionControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 获取当前用户权限列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermissionListUsingGET(options?: any) {
      return PermissionControllerApiFp(configuration).getUserPermissionListUsingGET(options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取权限树
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treePermsUsingGET(options?: any) {
      return PermissionControllerApiFp(configuration).treePermsUsingGET(options)(fetch, basePath);
    }
  };
};

/**
 * PermissionControllerApi - object-oriented interface
 * @export
 * @class PermissionControllerApi
 * @extends {BaseAPI}
 */
export class PermissionControllerApi extends BaseAPI {
  /**
   *
   * @summary 获取当前用户权限列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionControllerApi
   */
  public getUserPermissionListUsingGET(options?: any) {
    return PermissionControllerApiFp(this.configuration).getUserPermissionListUsingGET(options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取权限树
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionControllerApi
   */
  public treePermsUsingGET(options?: any) {
    return PermissionControllerApiFp(this.configuration).treePermsUsingGET(options)(this.fetch, this.basePath);
  }
}

/**
 * QuotationCategoryControllerApi - fetch parameter creator
 * @export
 */
export const QuotationCategoryControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增种类
     * @param {AddProjectCategoryReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCategoryUsingPOST(request: AddProjectCategoryReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling addCategoryUsingPOST.");
      }
      const localVarPath = `/quotation/addCategory`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"AddProjectCategoryReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取项目种类
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectCategoryUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/quotation/getProjectCategory`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageCurrent !== undefined) {
        localVarQueryParameter["pageCurrent"] = pageCurrent;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["orderBy"] = orderBy;
      }

      if (descOrAsc !== undefined) {
        localVarQueryParameter["descOrAsc"] = descOrAsc;
      }

      if (pageBegin !== undefined) {
        localVarQueryParameter["pageBegin"] = pageBegin;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * QuotationCategoryControllerApi - functional programming interface
 * @export
 */
export const QuotationCategoryControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增种类
     * @param {AddProjectCategoryReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCategoryUsingPOST(request: AddProjectCategoryReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = QuotationCategoryControllerApiFetchParamCreator(configuration).addCategoryUsingPOST(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取项目种类
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectCategoryUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetQuotationCategoryListResp> {
      const localVarFetchArgs = QuotationCategoryControllerApiFetchParamCreator(configuration).getProjectCategoryUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * QuotationCategoryControllerApi - factory interface
 * @export
 */
export const QuotationCategoryControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 新增种类
     * @param {AddProjectCategoryReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCategoryUsingPOST(request: AddProjectCategoryReq, options?: any) {
      return QuotationCategoryControllerApiFp(configuration).addCategoryUsingPOST(request, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取项目种类
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectCategoryUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      options?: any
    ) {
      return QuotationCategoryControllerApiFp(configuration).getProjectCategoryUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        options
      )(fetch, basePath);
    }
  };
};

/**
 * QuotationCategoryControllerApi - object-oriented interface
 * @export
 * @class QuotationCategoryControllerApi
 * @extends {BaseAPI}
 */
export class QuotationCategoryControllerApi extends BaseAPI {
  /**
   *
   * @summary 新增种类
   * @param {AddProjectCategoryReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationCategoryControllerApi
   */
  public addCategoryUsingPOST(request: AddProjectCategoryReq, options?: any) {
    return QuotationCategoryControllerApiFp(this.configuration).addCategoryUsingPOST(request, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取项目种类
   * @param {number} [pageCurrent] 当前页
   * @param {number} [pageSize] 每页数量
   * @param {string} [orderBy] 排序字段
   * @param {string} [descOrAsc] 升序或降序
   * @param {number} [pageBegin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationCategoryControllerApi
   */
  public getProjectCategoryUsingGET(
    pageCurrent?: number,
    pageSize?: number,
    orderBy?: string,
    descOrAsc?: string,
    pageBegin?: number,
    options?: any
  ) {
    return QuotationCategoryControllerApiFp(this.configuration).getProjectCategoryUsingGET(
      pageCurrent,
      pageSize,
      orderBy,
      descOrAsc,
      pageBegin,
      options
    )(this.fetch, this.basePath);
  }
}

/**
 * QuotationControllerApi - fetch parameter creator
 * @export
 */
export const QuotationControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加完整详细报价
     * @param {AddDetailQuotationReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDetailQuotationUsingPOST(request: AddDetailQuotationReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling addDetailQuotationUsingPOST.");
      }
      const localVarPath = `/quotation/addDetailQuotation`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"AddDetailQuotationReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 新增报价
     * @param {AddQuotationReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuotationUsingPOST(request: AddQuotationReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling addQuotationUsingPOST.");
      }
      const localVarPath = `/quotation/addQuotation`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"AddQuotationReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 根据报价Id删除报价
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuotationUsingPOST(quotationId: number, options: any = {}): FetchArgs {
      // verify required parameter 'quotationId' is not null or undefined
      if (quotationId === null || quotationId === undefined) {
        throw new RequiredError(
          "quotationId",
          "Required parameter quotationId was null or undefined when calling deleteQuotationUsingPOST."
        );
      }
      const localVarPath = `/quotation/deleteQuotation`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (quotationId !== undefined) {
        localVarQueryParameter["quotationId"] = quotationId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 根据名称搜索项目报价
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuotationByNameUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      content?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/quotation/getQuotationByName`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageCurrent !== undefined) {
        localVarQueryParameter["pageCurrent"] = pageCurrent;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["orderBy"] = orderBy;
      }

      if (descOrAsc !== undefined) {
        localVarQueryParameter["descOrAsc"] = descOrAsc;
      }

      if (pageBegin !== undefined) {
        localVarQueryParameter["pageBegin"] = pageBegin;
      }

      if (content !== undefined) {
        localVarQueryParameter["content"] = content;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取所有报价列表信息
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllQuotationInfoUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/quotation/listAllQuotationInfo`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageCurrent !== undefined) {
        localVarQueryParameter["pageCurrent"] = pageCurrent;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["orderBy"] = orderBy;
      }

      if (descOrAsc !== undefined) {
        localVarQueryParameter["descOrAsc"] = descOrAsc;
      }

      if (pageBegin !== undefined) {
        localVarQueryParameter["pageBegin"] = pageBegin;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 更新报价(不更新金额)
     * @param {UpdateQuotationConditionReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuotationConditionUsingPOST(request: UpdateQuotationConditionReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError(
          "request",
          "Required parameter request was null or undefined when calling updateQuotationConditionUsingPOST."
        );
      }
      const localVarPath = `/quotation/updateQuotationCondition`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"UpdateQuotationConditionReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * QuotationControllerApi - functional programming interface
 * @export
 */
export const QuotationControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加完整详细报价
     * @param {AddDetailQuotationReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDetailQuotationUsingPOST(request: AddDetailQuotationReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = QuotationControllerApiFetchParamCreator(configuration).addDetailQuotationUsingPOST(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 新增报价
     * @param {AddQuotationReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuotationUsingPOST(request: AddQuotationReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = QuotationControllerApiFetchParamCreator(configuration).addQuotationUsingPOST(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 根据报价Id删除报价
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuotationUsingPOST(quotationId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = QuotationControllerApiFetchParamCreator(configuration).deleteQuotationUsingPOST(quotationId, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 根据名称搜索项目报价
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuotationByNameUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      content?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetQuotationInfoResp> {
      const localVarFetchArgs = QuotationControllerApiFetchParamCreator(configuration).getQuotationByNameUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        content,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取所有报价列表信息
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllQuotationInfoUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetQuotationInfoResp> {
      const localVarFetchArgs = QuotationControllerApiFetchParamCreator(configuration).listAllQuotationInfoUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 更新报价(不更新金额)
     * @param {UpdateQuotationConditionReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuotationConditionUsingPOST(
      request: UpdateQuotationConditionReq,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = QuotationControllerApiFetchParamCreator(configuration).updateQuotationConditionUsingPOST(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * QuotationControllerApi - factory interface
 * @export
 */
export const QuotationControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 添加完整详细报价
     * @param {AddDetailQuotationReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDetailQuotationUsingPOST(request: AddDetailQuotationReq, options?: any) {
      return QuotationControllerApiFp(configuration).addDetailQuotationUsingPOST(request, options)(fetch, basePath);
    },
    /**
     *
     * @summary 新增报价
     * @param {AddQuotationReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addQuotationUsingPOST(request: AddQuotationReq, options?: any) {
      return QuotationControllerApiFp(configuration).addQuotationUsingPOST(request, options)(fetch, basePath);
    },
    /**
     *
     * @summary 根据报价Id删除报价
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuotationUsingPOST(quotationId: number, options?: any) {
      return QuotationControllerApiFp(configuration).deleteQuotationUsingPOST(quotationId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 根据名称搜索项目报价
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuotationByNameUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      content?: string,
      options?: any
    ) {
      return QuotationControllerApiFp(configuration).getQuotationByNameUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        content,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary 获取所有报价列表信息
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllQuotationInfoUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      options?: any
    ) {
      return QuotationControllerApiFp(configuration).listAllQuotationInfoUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary 更新报价(不更新金额)
     * @param {UpdateQuotationConditionReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuotationConditionUsingPOST(request: UpdateQuotationConditionReq, options?: any) {
      return QuotationControllerApiFp(configuration).updateQuotationConditionUsingPOST(request, options)(fetch, basePath);
    }
  };
};

/**
 * QuotationControllerApi - object-oriented interface
 * @export
 * @class QuotationControllerApi
 * @extends {BaseAPI}
 */
export class QuotationControllerApi extends BaseAPI {
  /**
   *
   * @summary 添加完整详细报价
   * @param {AddDetailQuotationReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationControllerApi
   */
  public addDetailQuotationUsingPOST(request: AddDetailQuotationReq, options?: any) {
    return QuotationControllerApiFp(this.configuration).addDetailQuotationUsingPOST(request, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 新增报价
   * @param {AddQuotationReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationControllerApi
   */
  public addQuotationUsingPOST(request: AddQuotationReq, options?: any) {
    return QuotationControllerApiFp(this.configuration).addQuotationUsingPOST(request, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 根据报价Id删除报价
   * @param {number} quotationId 报价id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationControllerApi
   */
  public deleteQuotationUsingPOST(quotationId: number, options?: any) {
    return QuotationControllerApiFp(this.configuration).deleteQuotationUsingPOST(quotationId, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 根据名称搜索项目报价
   * @param {number} [pageCurrent] 当前页
   * @param {number} [pageSize] 每页数量
   * @param {string} [orderBy] 排序字段
   * @param {string} [descOrAsc] 升序或降序
   * @param {number} [pageBegin]
   * @param {string} [content]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationControllerApi
   */
  public getQuotationByNameUsingGET(
    pageCurrent?: number,
    pageSize?: number,
    orderBy?: string,
    descOrAsc?: string,
    pageBegin?: number,
    content?: string,
    options?: any
  ) {
    return QuotationControllerApiFp(this.configuration).getQuotationByNameUsingGET(
      pageCurrent,
      pageSize,
      orderBy,
      descOrAsc,
      pageBegin,
      content,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取所有报价列表信息
   * @param {number} [pageCurrent] 当前页
   * @param {number} [pageSize] 每页数量
   * @param {string} [orderBy] 排序字段
   * @param {string} [descOrAsc] 升序或降序
   * @param {number} [pageBegin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationControllerApi
   */
  public listAllQuotationInfoUsingGET(
    pageCurrent?: number,
    pageSize?: number,
    orderBy?: string,
    descOrAsc?: string,
    pageBegin?: number,
    options?: any
  ) {
    return QuotationControllerApiFp(this.configuration).listAllQuotationInfoUsingGET(
      pageCurrent,
      pageSize,
      orderBy,
      descOrAsc,
      pageBegin,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 更新报价(不更新金额)
   * @param {UpdateQuotationConditionReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationControllerApi
   */
  public updateQuotationConditionUsingPOST(request: UpdateQuotationConditionReq, options?: any) {
    return QuotationControllerApiFp(this.configuration).updateQuotationConditionUsingPOST(request, options)(this.fetch, this.basePath);
  }
}

/**
 * QuotationExperimentControllerApi - fetch parameter creator
 * @export
 */
export const QuotationExperimentControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增默认报价参数
     * @param {AddQuotationExperimentReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addExperimentUsingPOST(request: AddQuotationExperimentReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling addExperimentUsingPOST.");
      }
      const localVarPath = `/quotation/addExperiment`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"AddQuotationExperimentReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 根据报价id获取实验参数
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuotationExperimentByIdUsingGET(quotationId: number, options: any = {}): FetchArgs {
      // verify required parameter 'quotationId' is not null or undefined
      if (quotationId === null || quotationId === undefined) {
        throw new RequiredError(
          "quotationId",
          "Required parameter quotationId was null or undefined when calling getQuotationExperimentByIdUsingGET."
        );
      }
      const localVarPath = `/quotation/getQuotationExperimentById`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (quotationId !== undefined) {
        localVarQueryParameter["quotationId"] = quotationId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 根据条件（动物、星期、毒性、是否默认报价）查询报价参数
     * @param {GetQuotationExperimentByConditonReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryExperimentByConditionUsingGET(request: GetQuotationExperimentByConditonReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError(
          "request",
          "Required parameter request was null or undefined when calling queryExperimentByConditionUsingGET."
        );
      }
      const localVarPath = `/quotation/queryExperimentByCondition`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"GetQuotationExperimentByConditonReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * QuotationExperimentControllerApi - functional programming interface
 * @export
 */
export const QuotationExperimentControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增默认报价参数
     * @param {AddQuotationExperimentReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addExperimentUsingPOST(request: AddQuotationExperimentReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = QuotationExperimentControllerApiFetchParamCreator(configuration).addExperimentUsingPOST(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 根据报价id获取实验参数
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuotationExperimentByIdUsingGET(
      quotationId: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultQuotationExperimentEntity> {
      const localVarFetchArgs = QuotationExperimentControllerApiFetchParamCreator(configuration).getQuotationExperimentByIdUsingGET(
        quotationId,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 根据条件（动物、星期、毒性、是否默认报价）查询报价参数
     * @param {GetQuotationExperimentByConditonReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryExperimentByConditionUsingGET(
      request: GetQuotationExperimentByConditonReq,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultQuotationExperimentEntity> {
      const localVarFetchArgs = QuotationExperimentControllerApiFetchParamCreator(configuration).queryExperimentByConditionUsingGET(
        request,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * QuotationExperimentControllerApi - factory interface
 * @export
 */
export const QuotationExperimentControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 新增默认报价参数
     * @param {AddQuotationExperimentReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addExperimentUsingPOST(request: AddQuotationExperimentReq, options?: any) {
      return QuotationExperimentControllerApiFp(configuration).addExperimentUsingPOST(request, options)(fetch, basePath);
    },
    /**
     *
     * @summary 根据报价id获取实验参数
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuotationExperimentByIdUsingGET(quotationId: number, options?: any) {
      return QuotationExperimentControllerApiFp(configuration).getQuotationExperimentByIdUsingGET(quotationId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 根据条件（动物、星期、毒性、是否默认报价）查询报价参数
     * @param {GetQuotationExperimentByConditonReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryExperimentByConditionUsingGET(request: GetQuotationExperimentByConditonReq, options?: any) {
      return QuotationExperimentControllerApiFp(configuration).queryExperimentByConditionUsingGET(request, options)(fetch, basePath);
    }
  };
};

/**
 * QuotationExperimentControllerApi - object-oriented interface
 * @export
 * @class QuotationExperimentControllerApi
 * @extends {BaseAPI}
 */
export class QuotationExperimentControllerApi extends BaseAPI {
  /**
   *
   * @summary 新增默认报价参数
   * @param {AddQuotationExperimentReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationExperimentControllerApi
   */
  public addExperimentUsingPOST(request: AddQuotationExperimentReq, options?: any) {
    return QuotationExperimentControllerApiFp(this.configuration).addExperimentUsingPOST(request, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 根据报价id获取实验参数
   * @param {number} quotationId 报价id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationExperimentControllerApi
   */
  public getQuotationExperimentByIdUsingGET(quotationId: number, options?: any) {
    return QuotationExperimentControllerApiFp(this.configuration).getQuotationExperimentByIdUsingGET(quotationId, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary 根据条件（动物、星期、毒性、是否默认报价）查询报价参数
   * @param {GetQuotationExperimentByConditonReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationExperimentControllerApi
   */
  public queryExperimentByConditionUsingGET(request: GetQuotationExperimentByConditonReq, options?: any) {
    return QuotationExperimentControllerApiFp(this.configuration).queryExperimentByConditionUsingGET(request, options)(
      this.fetch,
      this.basePath
    );
  }
}

/**
 * QuotationInventoryControllerApi - fetch parameter creator
 * @export
 */
export const QuotationInventoryControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增默认报价明细
     * @param {AddQuotationInventoryReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInventoryUsingPOST(request: AddQuotationInventoryReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling addInventoryUsingPOST.");
      }
      const localVarPath = `/quotation/addInventory`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"AddQuotationInventoryReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 根据报价id获取本次报价明细
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuotationExperimentByIdUsingGET1(quotationId: number, options: any = {}): FetchArgs {
      // verify required parameter 'quotationId' is not null or undefined
      if (quotationId === null || quotationId === undefined) {
        throw new RequiredError(
          "quotationId",
          "Required parameter quotationId was null or undefined when calling getQuotationExperimentByIdUsingGET1."
        );
      }
      const localVarPath = `/quotation/getQuotationInventoryById`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (quotationId !== undefined) {
        localVarQueryParameter["quotationId"] = quotationId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 根据报价id获取本次报价单价
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnitQuotationInventoryByIdUsingGET(quotationId: number, options: any = {}): FetchArgs {
      // verify required parameter 'quotationId' is not null or undefined
      if (quotationId === null || quotationId === undefined) {
        throw new RequiredError(
          "quotationId",
          "Required parameter quotationId was null or undefined when calling getUnitQuotationInventoryByIdUsingGET."
        );
      }
      const localVarPath = `/quotation/getUnitQuotationInventoryById`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (quotationId !== undefined) {
        localVarQueryParameter["quotationId"] = quotationId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 根据条件（动物、星期、毒性、是否单价、是否默认报价）查询报价明细组成
     * @param {GetQuotationInventoryByConditonReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryInventoryByConditionUsingPOST(request: GetQuotationInventoryByConditonReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError(
          "request",
          "Required parameter request was null or undefined when calling queryInventoryByConditionUsingPOST."
        );
      }
      const localVarPath = `/quotation/queryInventoryByCondition`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"GetQuotationInventoryByConditonReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 根据报价id更新此次单价
     * @param {UpdateQuotationInventoryReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuotationInventoryUnitUsingPOST(request: UpdateQuotationInventoryReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError(
          "request",
          "Required parameter request was null or undefined when calling updateQuotationInventoryUnitUsingPOST."
        );
      }
      const localVarPath = `/quotation/updateQuotationInventoryUnit`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>"UpdateQuotationInventoryReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * QuotationInventoryControllerApi - functional programming interface
 * @export
 */
export const QuotationInventoryControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增默认报价明细
     * @param {AddQuotationInventoryReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInventoryUsingPOST(request: AddQuotationInventoryReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = QuotationInventoryControllerApiFetchParamCreator(configuration).addInventoryUsingPOST(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 根据报价id获取本次报价明细
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuotationExperimentByIdUsingGET1(
      quotationId: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultQuotationInventoryEntity> {
      const localVarFetchArgs = QuotationInventoryControllerApiFetchParamCreator(configuration).getQuotationExperimentByIdUsingGET1(
        quotationId,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 根据报价id获取本次报价单价
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnitQuotationInventoryByIdUsingGET(
      quotationId: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultQuotationInventoryEntity> {
      const localVarFetchArgs = QuotationInventoryControllerApiFetchParamCreator(configuration).getUnitQuotationInventoryByIdUsingGET(
        quotationId,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 根据条件（动物、星期、毒性、是否单价、是否默认报价）查询报价明细组成
     * @param {GetQuotationInventoryByConditonReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryInventoryByConditionUsingPOST(
      request: GetQuotationInventoryByConditonReq,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultQuotationInventoryEntity> {
      const localVarFetchArgs = QuotationInventoryControllerApiFetchParamCreator(configuration).queryInventoryByConditionUsingPOST(
        request,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 根据报价id更新此次单价
     * @param {UpdateQuotationInventoryReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuotationInventoryUnitUsingPOST(
      request: UpdateQuotationInventoryReq,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = QuotationInventoryControllerApiFetchParamCreator(configuration).updateQuotationInventoryUnitUsingPOST(
        request,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * QuotationInventoryControllerApi - factory interface
 * @export
 */
export const QuotationInventoryControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 新增默认报价明细
     * @param {AddQuotationInventoryReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInventoryUsingPOST(request: AddQuotationInventoryReq, options?: any) {
      return QuotationInventoryControllerApiFp(configuration).addInventoryUsingPOST(request, options)(fetch, basePath);
    },
    /**
     *
     * @summary 根据报价id获取本次报价明细
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuotationExperimentByIdUsingGET1(quotationId: number, options?: any) {
      return QuotationInventoryControllerApiFp(configuration).getQuotationExperimentByIdUsingGET1(quotationId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 根据报价id获取本次报价单价
     * @param {number} quotationId 报价id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnitQuotationInventoryByIdUsingGET(quotationId: number, options?: any) {
      return QuotationInventoryControllerApiFp(configuration).getUnitQuotationInventoryByIdUsingGET(quotationId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 根据条件（动物、星期、毒性、是否单价、是否默认报价）查询报价明细组成
     * @param {GetQuotationInventoryByConditonReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryInventoryByConditionUsingPOST(request: GetQuotationInventoryByConditonReq, options?: any) {
      return QuotationInventoryControllerApiFp(configuration).queryInventoryByConditionUsingPOST(request, options)(fetch, basePath);
    },
    /**
     *
     * @summary 根据报价id更新此次单价
     * @param {UpdateQuotationInventoryReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuotationInventoryUnitUsingPOST(request: UpdateQuotationInventoryReq, options?: any) {
      return QuotationInventoryControllerApiFp(configuration).updateQuotationInventoryUnitUsingPOST(request, options)(fetch, basePath);
    }
  };
};

/**
 * QuotationInventoryControllerApi - object-oriented interface
 * @export
 * @class QuotationInventoryControllerApi
 * @extends {BaseAPI}
 */
export class QuotationInventoryControllerApi extends BaseAPI {
  /**
   *
   * @summary 新增默认报价明细
   * @param {AddQuotationInventoryReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationInventoryControllerApi
   */
  public addInventoryUsingPOST(request: AddQuotationInventoryReq, options?: any) {
    return QuotationInventoryControllerApiFp(this.configuration).addInventoryUsingPOST(request, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 根据报价id获取本次报价明细
   * @param {number} quotationId 报价id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationInventoryControllerApi
   */
  public getQuotationExperimentByIdUsingGET1(quotationId: number, options?: any) {
    return QuotationInventoryControllerApiFp(this.configuration).getQuotationExperimentByIdUsingGET1(quotationId, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary 根据报价id获取本次报价单价
   * @param {number} quotationId 报价id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationInventoryControllerApi
   */
  public getUnitQuotationInventoryByIdUsingGET(quotationId: number, options?: any) {
    return QuotationInventoryControllerApiFp(this.configuration).getUnitQuotationInventoryByIdUsingGET(quotationId, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary 根据条件（动物、星期、毒性、是否单价、是否默认报价）查询报价明细组成
   * @param {GetQuotationInventoryByConditonReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationInventoryControllerApi
   */
  public queryInventoryByConditionUsingPOST(request: GetQuotationInventoryByConditonReq, options?: any) {
    return QuotationInventoryControllerApiFp(this.configuration).queryInventoryByConditionUsingPOST(request, options)(
      this.fetch,
      this.basePath
    );
  }

  /**
   *
   * @summary 根据报价id更新此次单价
   * @param {UpdateQuotationInventoryReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuotationInventoryControllerApi
   */
  public updateQuotationInventoryUnitUsingPOST(request: UpdateQuotationInventoryReq, options?: any) {
    return QuotationInventoryControllerApiFp(this.configuration).updateQuotationInventoryUnitUsingPOST(request, options)(
      this.fetch,
      this.basePath
    );
  }
}

/**
 * RoleControllerApi - fetch parameter creator
 * @export
 */
export const RoleControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增角色
     * @param {AddRoleReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserUsingPOST(request: AddRoleReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling addUserUsingPOST.");
      }
      const localVarPath = `/role/addRole`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization = <any>"AddRoleReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 删除角色
     * @param {number} roleId 角色id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoleUsingPOST(roleId: number, options: any = {}): FetchArgs {
      // verify required parameter 'roleId' is not null or undefined
      if (roleId === null || roleId === undefined) {
        throw new RequiredError("roleId", "Required parameter roleId was null or undefined when calling deleteRoleUsingPOST.");
      }
      const localVarPath = `/role/deleteRole`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (roleId !== undefined) {
        localVarQueryParameter["roleId"] = roleId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 根据角色id获取角色信息
     * @param {number} roleId 角色id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInfoByRoleIdUsingGET(roleId: number, options: any = {}): FetchArgs {
      // verify required parameter 'roleId' is not null or undefined
      if (roleId === null || roleId === undefined) {
        throw new RequiredError("roleId", "Required parameter roleId was null or undefined when calling getRoleInfoByRoleIdUsingGET.");
      }
      const localVarPath = `/role/getRoleInfoByRoleId`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (roleId !== undefined) {
        localVarQueryParameter["roleId"] = roleId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取角色列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [roleName] 角色名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleInfoUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      roleName?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/role/listRoleInfo`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageCurrent !== undefined) {
        localVarQueryParameter["pageCurrent"] = pageCurrent;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["orderBy"] = orderBy;
      }

      if (descOrAsc !== undefined) {
        localVarQueryParameter["descOrAsc"] = descOrAsc;
      }

      if (pageBegin !== undefined) {
        localVarQueryParameter["pageBegin"] = pageBegin;
      }

      if (roleName !== undefined) {
        localVarQueryParameter["roleName"] = roleName;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 通过名称查询角色
     * @param {string} roleName 角色名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    selectUserNameByRoleUsingGET(roleName: string, options: any = {}): FetchArgs {
      // verify required parameter 'roleName' is not null or undefined
      if (roleName === null || roleName === undefined) {
        throw new RequiredError("roleName", "Required parameter roleName was null or undefined when calling selectUserNameByRoleUsingGET.");
      }
      const localVarPath = `/role/getUserNameByRole`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (roleName !== undefined) {
        localVarQueryParameter["roleName"] = roleName;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 修改角色
     * @param {UpdateRoleReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleUsingPOST(request: UpdateRoleReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling updateRoleUsingPOST.");
      }
      const localVarPath = `/role/updateRole`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization = <any>"UpdateRoleReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * RoleControllerApi - functional programming interface
 * @export
 */
export const RoleControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增角色
     * @param {AddRoleReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserUsingPOST(request: AddRoleReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).addUserUsingPOST(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 删除角色
     * @param {number} roleId 角色id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoleUsingPOST(roleId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).deleteRoleUsingPOST(roleId, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 根据角色id获取角色信息
     * @param {number} roleId 角色id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInfoByRoleIdUsingGET(roleId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetRoleInfoResp> {
      const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).getRoleInfoByRoleIdUsingGET(roleId, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取角色列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [roleName] 角色名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleInfoUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      roleName?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetRoleInfoResp> {
      const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).listRoleInfoUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        roleName,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 通过名称查询角色
     * @param {string} roleName 角色名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    selectUserNameByRoleUsingGET(roleName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).selectUserNameByRoleUsingGET(roleName, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 修改角色
     * @param {UpdateRoleReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleUsingPOST(request: UpdateRoleReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = RoleControllerApiFetchParamCreator(configuration).updateRoleUsingPOST(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * RoleControllerApi - factory interface
 * @export
 */
export const RoleControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 新增角色
     * @param {AddRoleReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserUsingPOST(request: AddRoleReq, options?: any) {
      return RoleControllerApiFp(configuration).addUserUsingPOST(request, options)(fetch, basePath);
    },
    /**
     *
     * @summary 删除角色
     * @param {number} roleId 角色id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoleUsingPOST(roleId: number, options?: any) {
      return RoleControllerApiFp(configuration).deleteRoleUsingPOST(roleId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 根据角色id获取角色信息
     * @param {number} roleId 角色id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInfoByRoleIdUsingGET(roleId: number, options?: any) {
      return RoleControllerApiFp(configuration).getRoleInfoByRoleIdUsingGET(roleId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取角色列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [roleName] 角色名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleInfoUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      roleName?: string,
      options?: any
    ) {
      return RoleControllerApiFp(configuration).listRoleInfoUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        roleName,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary 通过名称查询角色
     * @param {string} roleName 角色名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    selectUserNameByRoleUsingGET(roleName: string, options?: any) {
      return RoleControllerApiFp(configuration).selectUserNameByRoleUsingGET(roleName, options)(fetch, basePath);
    },
    /**
     *
     * @summary 修改角色
     * @param {UpdateRoleReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleUsingPOST(request: UpdateRoleReq, options?: any) {
      return RoleControllerApiFp(configuration).updateRoleUsingPOST(request, options)(fetch, basePath);
    }
  };
};

/**
 * RoleControllerApi - object-oriented interface
 * @export
 * @class RoleControllerApi
 * @extends {BaseAPI}
 */
export class RoleControllerApi extends BaseAPI {
  /**
   *
   * @summary 新增角色
   * @param {AddRoleReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleControllerApi
   */
  public addUserUsingPOST(request: AddRoleReq, options?: any) {
    return RoleControllerApiFp(this.configuration).addUserUsingPOST(request, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 删除角色
   * @param {number} roleId 角色id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleControllerApi
   */
  public deleteRoleUsingPOST(roleId: number, options?: any) {
    return RoleControllerApiFp(this.configuration).deleteRoleUsingPOST(roleId, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 根据角色id获取角色信息
   * @param {number} roleId 角色id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleControllerApi
   */
  public getRoleInfoByRoleIdUsingGET(roleId: number, options?: any) {
    return RoleControllerApiFp(this.configuration).getRoleInfoByRoleIdUsingGET(roleId, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取角色列表
   * @param {number} [pageCurrent] 当前页
   * @param {number} [pageSize] 每页数量
   * @param {string} [orderBy] 排序字段
   * @param {string} [descOrAsc] 升序或降序
   * @param {number} [pageBegin]
   * @param {string} [roleName] 角色名称
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleControllerApi
   */
  public listRoleInfoUsingGET(
    pageCurrent?: number,
    pageSize?: number,
    orderBy?: string,
    descOrAsc?: string,
    pageBegin?: number,
    roleName?: string,
    options?: any
  ) {
    return RoleControllerApiFp(this.configuration).listRoleInfoUsingGET(
      pageCurrent,
      pageSize,
      orderBy,
      descOrAsc,
      pageBegin,
      roleName,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 通过名称查询角色
   * @param {string} roleName 角色名称
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleControllerApi
   */
  public selectUserNameByRoleUsingGET(roleName: string, options?: any) {
    return RoleControllerApiFp(this.configuration).selectUserNameByRoleUsingGET(roleName, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 修改角色
   * @param {UpdateRoleReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleControllerApi
   */
  public updateRoleUsingPOST(request: UpdateRoleReq, options?: any) {
    return RoleControllerApiFp(this.configuration).updateRoleUsingPOST(request, options)(this.fetch, this.basePath);
  }
}

/**
 * UserControllerApi - fetch parameter creator
 * @export
 */
export const UserControllerApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增用户
     * @param {AddUserReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserUsingPOST1(request: AddUserReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling addUserUsingPOST1.");
      }
      const localVarPath = `/user/addUser`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization = <any>"AddUserReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 删除用户
     * @param {number} userId 用户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserUsingPOST1(userId: number, options: any = {}): FetchArgs {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError("userId", "Required parameter userId was null or undefined when calling deleteUserUsingPOST1.");
      }
      const localVarPath = `/user/deleteUser`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取登录的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoginUserInfoUsingGET(options: any = {}): FetchArgs {
      const localVarPath = `/user/getLoginUserInfo`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 根据用户id获取用户
     * @param {number} userId 用户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByUserIdUsingGET(userId: number, options: any = {}): FetchArgs {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError("userId", "Required parameter userId was null or undefined when calling getUserByUserIdUsingGET.");
      }
      const localVarPath = `/user/getUserByUserId`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 获取用户列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [realName]
     * @param {string} [mobile]
     * @param {string} [userName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserInfoUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      realName?: string,
      mobile?: string,
      userName?: string,
      options: any = {}
    ): FetchArgs {
      const localVarPath = `/user/listUserInfo`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageCurrent !== undefined) {
        localVarQueryParameter["pageCurrent"] = pageCurrent;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter["orderBy"] = orderBy;
      }

      if (descOrAsc !== undefined) {
        localVarQueryParameter["descOrAsc"] = descOrAsc;
      }

      if (pageBegin !== undefined) {
        localVarQueryParameter["pageBegin"] = pageBegin;
      }

      if (realName !== undefined) {
        localVarQueryParameter["realName"] = realName;
      }

      if (mobile !== undefined) {
        localVarQueryParameter["mobile"] = mobile;
      }

      if (userName !== undefined) {
        localVarQueryParameter["userName"] = userName;
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 修改密码
     * @param {UpdatePwdReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordUsingPOST(request: UpdatePwdReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling updatePasswordUsingPOST.");
      }
      const localVarPath = `/user/updatePassword`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization = <any>"UpdatePwdReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary 更新用户
     * @param {UpdateUserReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserUsingPOST(request: UpdateUserReq, options: any = {}): FetchArgs {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling updateUserUsingPOST.");
      }
      const localVarPath = `/user/updateUser`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization = <any>"UpdateUserReq" !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : request || "";

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增用户
     * @param {AddUserReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserUsingPOST1(request: AddUserReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).addUserUsingPOST1(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 删除用户
     * @param {number} userId 用户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserUsingPOST1(userId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).deleteUserUsingPOST1(userId, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取登录的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoginUserInfoUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetLoginUserInfoResp> {
      const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).getLoginUserInfoUsingGET(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 根据用户id获取用户
     * @param {number} userId 用户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByUserIdUsingGET(userId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResultGetUserInfoResp> {
      const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).getUserByUserIdUsingGET(userId, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 获取用户列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [realName]
     * @param {string} [mobile]
     * @param {string} [userName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserInfoUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      realName?: string,
      mobile?: string,
      userName?: string,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<ResultPageInfoGetUserInfoResp> {
      const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).listUserInfoUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        realName,
        mobile,
        userName,
        options
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 修改密码
     * @param {UpdatePwdReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordUsingPOST(request: UpdatePwdReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).updatePasswordUsingPOST(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary 更新用户
     * @param {UpdateUserReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserUsingPOST(request: UpdateUserReq, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Result> {
      const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).updateUserUsingPOST(request, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function(configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     *
     * @summary 新增用户
     * @param {AddUserReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserUsingPOST1(request: AddUserReq, options?: any) {
      return UserControllerApiFp(configuration).addUserUsingPOST1(request, options)(fetch, basePath);
    },
    /**
     *
     * @summary 删除用户
     * @param {number} userId 用户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserUsingPOST1(userId: number, options?: any) {
      return UserControllerApiFp(configuration).deleteUserUsingPOST1(userId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取登录的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoginUserInfoUsingGET(options?: any) {
      return UserControllerApiFp(configuration).getLoginUserInfoUsingGET(options)(fetch, basePath);
    },
    /**
     *
     * @summary 根据用户id获取用户
     * @param {number} userId 用户id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByUserIdUsingGET(userId: number, options?: any) {
      return UserControllerApiFp(configuration).getUserByUserIdUsingGET(userId, options)(fetch, basePath);
    },
    /**
     *
     * @summary 获取用户列表
     * @param {number} [pageCurrent] 当前页
     * @param {number} [pageSize] 每页数量
     * @param {string} [orderBy] 排序字段
     * @param {string} [descOrAsc] 升序或降序
     * @param {number} [pageBegin]
     * @param {string} [realName]
     * @param {string} [mobile]
     * @param {string} [userName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserInfoUsingGET(
      pageCurrent?: number,
      pageSize?: number,
      orderBy?: string,
      descOrAsc?: string,
      pageBegin?: number,
      realName?: string,
      mobile?: string,
      userName?: string,
      options?: any
    ) {
      return UserControllerApiFp(configuration).listUserInfoUsingGET(
        pageCurrent,
        pageSize,
        orderBy,
        descOrAsc,
        pageBegin,
        realName,
        mobile,
        userName,
        options
      )(fetch, basePath);
    },
    /**
     *
     * @summary 修改密码
     * @param {UpdatePwdReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordUsingPOST(request: UpdatePwdReq, options?: any) {
      return UserControllerApiFp(configuration).updatePasswordUsingPOST(request, options)(fetch, basePath);
    },
    /**
     *
     * @summary 更新用户
     * @param {UpdateUserReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserUsingPOST(request: UpdateUserReq, options?: any) {
      return UserControllerApiFp(configuration).updateUserUsingPOST(request, options)(fetch, basePath);
    }
  };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
  /**
   *
   * @summary 新增用户
   * @param {AddUserReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public addUserUsingPOST1(request: AddUserReq, options?: any) {
    return UserControllerApiFp(this.configuration).addUserUsingPOST1(request, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 删除用户
   * @param {number} userId 用户id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public deleteUserUsingPOST1(userId: number, options?: any) {
    return UserControllerApiFp(this.configuration).deleteUserUsingPOST1(userId, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取登录的用户信息
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public getLoginUserInfoUsingGET(options?: any) {
    return UserControllerApiFp(this.configuration).getLoginUserInfoUsingGET(options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 根据用户id获取用户
   * @param {number} userId 用户id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public getUserByUserIdUsingGET(userId: number, options?: any) {
    return UserControllerApiFp(this.configuration).getUserByUserIdUsingGET(userId, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 获取用户列表
   * @param {number} [pageCurrent] 当前页
   * @param {number} [pageSize] 每页数量
   * @param {string} [orderBy] 排序字段
   * @param {string} [descOrAsc] 升序或降序
   * @param {number} [pageBegin]
   * @param {string} [realName]
   * @param {string} [mobile]
   * @param {string} [userName]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public listUserInfoUsingGET(
    pageCurrent?: number,
    pageSize?: number,
    orderBy?: string,
    descOrAsc?: string,
    pageBegin?: number,
    realName?: string,
    mobile?: string,
    userName?: string,
    options?: any
  ) {
    return UserControllerApiFp(this.configuration).listUserInfoUsingGET(
      pageCurrent,
      pageSize,
      orderBy,
      descOrAsc,
      pageBegin,
      realName,
      mobile,
      userName,
      options
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 修改密码
   * @param {UpdatePwdReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public updatePasswordUsingPOST(request: UpdatePwdReq, options?: any) {
    return UserControllerApiFp(this.configuration).updatePasswordUsingPOST(request, options)(this.fetch, this.basePath);
  }

  /**
   *
   * @summary 更新用户
   * @param {UpdateUserReq} request request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public updateUserUsingPOST(request: UpdateUserReq, options?: any) {
    return UserControllerApiFp(this.configuration).updateUserUsingPOST(request, options)(this.fetch, this.basePath);
  }
}
